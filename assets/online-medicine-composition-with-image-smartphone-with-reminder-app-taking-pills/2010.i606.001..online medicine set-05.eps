%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 2010.i606.001.P.m005.c20.online medicine set-05.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: MSI
%%CreationDate: 1/28/2021
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 5 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">2010.i606.001.P.m005.c20.online medicine set</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2021-01-28T08:52:46+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2021-01-28T08:52:46+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2021-01-28T08:52:46+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A71rN3KLiIRSlHW5c3PL4&#xA;uUSyFQq1YU+FaUoPGu28hTCQO1I97m6URLFK3obsAtOYWT413rvxB4/aysyouXHDxRBWNqfoKBcX&#xA;ohklWsaSOvqGhIHFOdTuO2DxBdJOmlRIsgeRpMtF1WC/icRM7mGgd3ABNa06Ejtk3GTHFXYq7FXY&#xA;q7FUt8wQ6nNYcdNbhchuVeRWq8SDQgrvv8Ndq0rtko1e7Vm4+A8H1dGLLrOtI9r9cvySnB51QRiM&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:f62f5c50-542e-4347-a487-639bdf27c0be</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:f62f5c50-542e-4347-a487-639bdf27c0be</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:1a845bf7-f780-45dd-8a52-847bca974687</stRef:instanceID>
            <stRef:documentID>xmp.did:417a26ef-775f-b643-b484-50b52e2c778e</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:169f9980-890a-d745-823c-443977cadf6f</stEvt:instanceID>
                  <stEvt:when>2020-07-30T15:38:57+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:093171fb-1a48-e543-95bc-b63b76632b34</stEvt:instanceID>
                  <stEvt:when>2020-09-27T21:53:04+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ee85f498-e7bb-b24b-b362-5dccab2becb9</stEvt:instanceID>
                  <stEvt:when>2020-09-29T02:00:09+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8011b285-b404-3142-87a7-eec18bc0fa64</stEvt:instanceID>
                  <stEvt:when>2020-10-06T13:46:17+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.2 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b1c0b0a6-5464-5d4b-a0dd-0687643f807a</stEvt:instanceID>
                  <stEvt:when>2020-10-08T21:07:25+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d36b116d-9d75-4f78-8969-e41bf0c3c2f5</stEvt:instanceID>
                  <stEvt:when>2020-10-12T12:01+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.1 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:eaf82f71-f5b7-44d4-8b5d-3c43eab194cf</stEvt:instanceID>
                  <stEvt:when>2020-10-12T12:01:23+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.1 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:417a26ef-775f-b643-b484-50b52e2c778e</stEvt:instanceID>
                  <stEvt:when>2021-01-28T04:07:10+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f62f5c50-542e-4347-a487-639bdf27c0be</stEvt:instanceID>
                  <stEvt:when>2021-01-28T08:52:46+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <illustrator:CreatorSubTool>AIRobin</illustrator:CreatorSubTool>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>188</xmpG:red>
                           <xmpG:green>190</xmpG:green>
                           <xmpG:blue>192</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=165 G=77 B=60 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>165</xmpG:red>
                           <xmpG:green>77</xmpG:green>
                           <xmpG:blue>60</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=119 G=49 B=40 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>119</xmpG:red>
                           <xmpG:green>49</xmpG:green>
                           <xmpG:blue>40</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=188 G=228 B=237 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>188</xmpG:red>
                           <xmpG:green>228</xmpG:green>
                           <xmpG:blue>237</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=106 G=143 B=155 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>106</xmpG:red>
                           <xmpG:green>143</xmpG:green>
                           <xmpG:blue>155</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=30 G=82 B=89 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>30</xmpG:red>
                           <xmpG:green>82</xmpG:green>
                           <xmpG:blue>89</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=252 G=217 B=217 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>252</xmpG:red>
                           <xmpG:green>217</xmpG:green>
                           <xmpG:blue>217</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=247 G=176 B=176 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>247</xmpG:red>
                           <xmpG:green>176</xmpG:green>
                           <xmpG:blue>176</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=234 G=146 B=146 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>234</xmpG:red>
                           <xmpG:green>146</xmpG:green>
                           <xmpG:blue>146</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=129 G=242 B=239 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>129</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>239</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=45 G=145 B=138 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>45</xmpG:red>
                           <xmpG:green>145</xmpG:green>
                           <xmpG:blue>138</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=249 G=170 B=143 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>249</xmpG:red>
                           <xmpG:green>170</xmpG:green>
                           <xmpG:blue>143</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=204 G=97 B=72 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>204</xmpG:red>
                           <xmpG:green>97</xmpG:green>
                           <xmpG:blue>72</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=119 B=105 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>119</xmpG:green>
                           <xmpG:blue>105</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=221 G=66 B=49 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>221</xmpG:red>
                           <xmpG:green>66</xmpG:green>
                           <xmpG:blue>49</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=104 G=47 B=44 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>104</xmpG:red>
                           <xmpG:green>47</xmpG:green>
                           <xmpG:blue>44</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=147 G=154 B=160 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>147</xmpG:red>
                           <xmpG:green>154</xmpG:green>
                           <xmpG:blue>160</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
370.688 227.646 mo
370.688 305.957 307.204 369.441 228.892 369.441 cv
150.581 369.441 87.0965 305.957 87.0965 227.646 cv
87.0965 149.334 150.581 85.8499 228.892 85.8499 cv
307.204 85.8499 370.688 149.334 370.688 227.646 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.988235 .85098 .85098 rgb
f
gsave
370.688 227.646 mo
370.688 305.957 307.204 369.441 228.892 369.441 cv
150.581 369.441 87.0965 305.957 87.0965 227.646 cv
87.0965 149.334 150.581 85.8499 228.892 85.8499 cv
307.204 85.8499 370.688 149.334 370.688 227.646 cv
cp
clp
286.792 388.977 mo
164.739 388.977 li
163.407 388.977 162.327 387.897 162.327 386.565 cv
162.327 146.732 li
162.327 145.401 163.407 144.321 164.739 144.321 cv
286.792 144.321 li
288.124 144.321 289.204 145.401 289.204 146.732 cv
289.204 386.565 li
289.204 387.897 288.124 388.977 286.792 388.977 cv
cp
.917647 .572549 .572549 rgb
f
389.817 241.293 mo
325.769 241.293 li
324.438 241.293 323.358 240.213 323.358 238.881 cv
323.358 188.751 li
323.358 187.419 324.438 186.339 325.769 186.339 cv
389.817 186.339 li
391.149 186.339 392.229 187.419 392.229 188.75 cv
392.229 238.881 li
392.229 240.213 391.149 241.293 389.817 241.293 cv
cp
f
331.315 188.156 mo
327.93 188.156 325.176 190.912 325.176 194.297 cv
325.176 233.334 li
325.176 236.72 327.93 239.475 331.315 239.475 cv
384.271 239.475 li
387.657 239.475 390.412 236.72 390.412 233.334 cv
390.412 194.297 li
390.412 190.912 387.657 188.156 384.271 188.156 cv
331.315 188.156 li
cp
384.271 243.11 mo
331.315 243.11 li
325.925 243.11 321.541 238.726 321.541 233.334 cv
321.541 194.297 li
321.541 188.906 325.925 184.521 331.315 184.521 cv
384.271 184.521 li
389.662 184.521 394.047 188.906 394.047 194.297 cv
394.047 233.334 li
394.047 238.726 389.662 243.11 384.271 243.11 cv
cp
f
153.327 339.961 mo
90.0966 339.961 li
88.577 339.961 87.345 338.729 87.345 337.209 cv
87.345 217.064 li
87.345 215.544 88.577 214.312 90.0967 214.312 cv
153.327 214.312 li
154.847 214.312 156.079 215.544 156.079 217.064 cv
156.079 337.209 li
156.079 338.729 154.847 339.961 153.327 339.961 cv
cp
f
96.4253 216.129 mo
92.4211 216.129 89.163 219.387 89.163 223.393 cv
89.163 330.881 li
89.163 334.885 92.4211 338.143 96.4253 338.143 cv
146.998 338.143 li
151.002 338.143 154.26 334.885 154.26 330.881 cv
154.26 223.393 li
154.26 219.387 151.002 216.129 146.998 216.129 cv
96.4253 216.129 li
cp
146.998 341.779 mo
96.4253 341.779 li
90.4167 341.779 85.5277 336.89 85.5277 330.881 cv
85.5277 223.393 li
85.5277 217.383 90.4167 212.494 96.4253 212.494 cv
146.998 212.494 li
153.007 212.494 157.896 217.383 157.896 223.393 cv
157.896 330.881 li
157.896 336.89 153.007 341.779 146.998 341.779 cv
cp
f
350.468 347.574 mo
352.795 353.938 351.705 359.938 347.996 362.12 cv
344.286 364.265 340.141 362.629 340.141 362.629 cv
340.141 362.629 339.777 368.665 336.323 371.356 cv
330.541 375.865 322.905 372.12 322.905 372.12 cv
322.905 372.12 322.759 374.302 315.995 375.756 cv
306.032 377.901 300.322 372.629 300.322 372.629 cv
300.322 372.629 298.468 377.574 291.05 377.901 cv
290.25 377.938 289.086 377.647 287.632 377.138 cv
283.195 375.538 276.104 371.683 268.577 367.065 cv
268.541 367.065 268.504 367.029 268.468 366.992 cv
262.068 363.065 255.34 358.556 249.668 354.447 cv
243.595 350.011 238.722 346.01 236.722 343.538 cv
228.286 333.174 215.559 286.083 208.104 276.992 cv
207.558 276.301 206.977 275.719 206.431 275.174 cv
203.122 271.938 199.558 270.774 196.249 270.52 cv
194.213 270.337 192.249 270.52 190.467 270.81 cv
193.777 256.519 201.268 244.847 210.94 238.555 cv
213.74 236.737 216.686 235.355 219.813 234.483 cv
219.849 234.446 219.886 234.446 219.958 234.446 cv
221.631 234.228 224.213 233.865 227.268 233.428 cv
227.304 233.465 227.34 233.428 227.34 233.428 cv
237.668 232.083 253.886 230.265 264.432 231.828 cv
278.977 233.974 294.432 240.156 303.741 245.137 cv
313.014 250.083 330.359 265.246 336.832 267.719 cv
343.341 270.192 351.705 271.756 351.995 276.374 cv
352.105 277.828 351.85 279.61 351.159 281.392 cv
349.705 285.356 346.214 289.429 340.25 290.301 cv
331.595 291.538 321.377 287.538 316.723 285.683 cv
312.104 283.792 307.123 279.792 305.595 281.647 cv
304.032 283.501 312.868 305.683 320.286 314.592 cv
327.123 322.774 346.905 337.792 350.468 347.574 cv
cp
f
grestore
354.558 161.904 mo
345.483 173.058 li
345.186 173.421 344.757 173.586 344.295 173.487 cv
343.833 173.388 343.47 173.058 343.338 172.629 cv
336.243 147.945 li
323.901 195.333 li
323.769 195.861 323.274 196.257 322.713 196.257 cv
322.68 196.257 322.647 196.257 322.647 196.257 cv
322.053 196.224 321.558 195.762 321.492 195.168 cv
307.995 86.268 li
295.356 160.65 li
295.323 160.881 li
295.323 160.914 295.323 160.914 295.29 160.947 cv
295.29 161.079 295.224 161.178 295.158 161.277 cv
295.092 161.409 295.026 161.541 294.894 161.607 cv
294.696 161.805 294.399 161.904 294.102 161.904 cv
247.704 161.904 li
238.629 173.058 li
238.365 173.421 237.903 173.586 237.441 173.487 cv
236.979 173.388 236.616 173.058 236.484 172.629 cv
229.389 147.945 li
217.047 195.333 li
216.915 195.861 216.42 196.257 215.859 196.257 cv
215.826 196.257 215.793 196.257 215.793 196.257 cv
215.199 196.224 214.704 195.762 214.638 195.168 cv
201.207 86.235 li
188.502 160.65 li
188.469 160.881 li
188.469 160.98 188.436 161.046 188.37 161.145 cv
188.37 161.211 188.304 161.277 188.271 161.343 cv
188.271 161.409 188.205 161.442 188.139 161.508 cv
187.974 161.739 187.644 161.838 187.314 161.871 cv
187.281 161.871 187.281 161.871 187.248 161.871 cv
187.05 161.871 li
140.883 161.904 li
131.808 173.058 li
131.511 173.421 131.049 173.586 130.587 173.487 cv
130.125 173.388 129.762 173.058 129.663 172.629 cv
122.535 147.945 li
110.226 195.333 li
110.061 195.861 109.566 196.257 109.005 196.257 cv
109.005 196.257 108.972 196.257 108.939 196.257 cv
108.345 196.224 107.883 195.762 107.784 195.168 cv
103.395 161.607 li
105.441 157.911 li
109.434 188.535 li
121.281 142.962 li
121.413 142.434 121.908 142.038 122.469 142.038 cv
122.964 142.104 123.525 142.401 123.657 142.929 cv
131.379 169.659 li
139.332 159.891 li
139.563 159.594 139.926 159.429 140.289 159.429 cv
186.192 159.396 li
200.184 77.523 li
200.283 76.929 200.778 76.434 201.438 76.5 cv
202.032 76.5 202.56 76.962 202.626 77.589 cv
216.288 188.436 li
228.135 142.962 li
228.267 142.434 228.762 142.038 229.323 142.038 cv
229.884 142.104 230.346 142.401 230.511 142.929 cv
238.2 169.659 li
246.153 159.891 li
246.417 159.594 246.747 159.429 247.143 159.429 cv
293.046 159.429 li
306.939 77.523 li
307.071 76.929 307.5 76.434 308.193 76.5 cv
308.82 76.5 309.315 76.962 309.414 77.589 cv
323.142 188.436 li
334.989 142.962 li
335.121 142.434 335.616 142.038 336.144 142.038 cv
336.804 142.104 337.2 142.401 337.365 142.929 cv
345.054 169.659 li
353.007 159.891 li
353.106 159.792 353.205 159.693 353.337 159.627 cv
354.558 161.904 li
cp
.866667 .258824 .192157 rgb
f
276.168 375.713 mo
154.114 375.713 li
152.782 375.713 151.703 374.633 151.703 373.301 cv
151.703 133.468 li
151.703 132.136 152.782 131.057 154.114 131.057 cv
276.168 131.057 li
277.499 131.057 278.579 132.136 278.579 133.468 cv
278.579 373.301 li
278.579 374.633 277.499 375.713 276.168 375.713 cv
cp
.415686 .560784 .607843 rgb
f
269.111 359.001 mo
161.171 359.001 li
159.993 359.001 159.038 358.046 159.038 356.868 cv
159.038 144.767 li
159.038 143.59 159.993 142.635 161.171 142.635 cv
269.111 142.635 li
270.289 142.635 271.243 143.59 271.243 144.767 cv
271.243 356.868 li
271.243 358.046 270.289 359.001 269.111 359.001 cv
cp
.988235 .976471 .976471 rgb
f
225.828 142.635 mo
225.828 148.537 221.043 153.322 215.141 153.322 cv
209.239 153.322 204.454 148.537 204.454 142.635 cv
204.454 136.733 209.239 131.948 215.141 131.948 cv
221.043 131.948 225.828 136.733 225.828 142.635 cv
cp
.415686 .560784 .607843 rgb
f
218.259 142.635 mo
218.259 144.357 216.863 145.753 215.141 145.753 cv
213.419 145.753 212.023 144.357 212.023 142.635 cv
212.023 140.913 213.419 139.517 215.141 139.517 cv
216.863 139.517 218.259 140.913 218.259 142.635 cv
cp
.117647 .321569 .34902 rgb
f
159.038 189.713 mo
271.243 189.713 li
271.243 174.884 li
159.038 174.884 li
159.038 189.713 li
cp
.505882 .94902 .937255 rgb
f
257.535 350.228 mo
196.689 350.228 li
196.689 343.044 li
257.535 343.044 li
257.535 350.228 li
cp
.576471 .603922 .627451 rgb
f
191.383 342.101 mo
190.771 343.509 189.761 344.637 188.525 345.389 cv
188.02 345.679 li
179.907 350.321 li
171.783 345.679 li
171.268 345.389 li
170.042 344.637 169.033 343.509 168.409 342.101 cv
166.819 338.415 168.506 334.138 172.181 332.548 cv
174.867 331.387 177.854 331.957 179.896 333.784 cv
181.949 331.957 184.936 331.387 187.612 332.548 cv
191.297 334.138 192.985 338.415 191.383 342.101 cv
cp
.866667 .258824 .192157 rgb
f
191.384 342.101 mo
191.414 342.101 li
191.384 342.101 li
cp
175.071 333.188 mo
174.259 333.188 173.442 333.35 172.67 333.683 cv
169.63 335 168.228 338.556 169.546 341.611 cv
170.05 342.749 170.87 343.693 171.916 344.334 cv
179.902 348.899 li
187.91 344.316 li
188.933 343.693 189.752 342.75 190.25 341.608 cv
190.892 340.127 190.92 338.485 190.327 336.988 cv
189.735 335.495 188.596 334.32 187.122 333.683 cv
184.969 332.754 182.462 333.155 180.72 334.708 cv
180.25 335.124 179.542 335.127 179.072 334.705 cv
177.958 333.711 176.524 333.188 175.071 333.188 cv
cp
179.897 351.563 mo
179.739 351.563 179.579 351.532 179.428 351.471 cv
179.355 351.44 179.286 351.403 179.222 351.361 cv
170.661 346.468 li
169.146 345.539 167.991 344.21 167.279 342.602 cv
165.416 338.285 167.396 333.271 171.689 331.411 cv
174.401 330.237 177.517 330.57 179.898 332.212 cv
182.288 330.57 185.404 330.24 188.103 331.411 cv
190.185 332.31 191.793 333.967 192.628 336.076 cv
193.464 338.19 193.426 340.506 192.518 342.594 cv
191.817 344.207 190.659 345.539 189.169 346.447 cv
180.543 351.384 li
180.346 351.502 180.123 351.563 179.897 351.563 cv
cp
f
252.632 158.988 mo
177.639 158.988 li
173.137 158.988 169.488 162.638 169.488 167.14 cv
169.488 198.477 li
169.488 202.979 173.137 206.629 177.639 206.629 cv
180.398 206.629 li
180.398 206.629 186.128 206.903 189.286 209.176 cv
192.42 211.431 194.063 215.29 194.063 215.29 cv
194.1 206.629 li
252.632 206.629 li
257.134 206.629 260.784 202.979 260.784 198.477 cv
260.784 167.14 li
260.784 162.638 257.134 158.988 252.632 158.988 cv
cp
.988235 .976471 .976471 rgb
f
194.062 216.527 mo
193.574 216.527 193.123 216.237 192.925 215.776 cv
192.908 215.741 191.366 212.197 188.564 210.18 cv
185.735 208.146 180.391 207.868 180.338 207.864 cv
177.639 207.866 li
172.462 207.866 168.25 203.654 168.25 198.477 cv
168.25 167.14 li
168.25 161.962 172.462 157.75 177.639 157.75 cv
252.632 157.75 li
257.809 157.75 262.021 161.962 262.021 167.14 cv
262.021 198.477 li
262.021 203.654 257.809 207.866 252.632 207.866 cv
250.462 207.866 li
249.779 207.866 249.224 207.312 249.224 206.629 cv
249.224 205.945 249.779 205.391 250.462 205.391 cv
252.632 205.391 li
256.445 205.391 259.546 202.289 259.546 198.477 cv
259.546 167.14 li
259.546 163.327 256.445 160.225 252.632 160.225 cv
177.639 160.225 li
173.827 160.225 170.725 163.327 170.725 167.14 cv
170.725 198.477 li
170.725 202.289 173.827 205.391 177.639 205.391 cv
180.398 205.391 li
180.706 205.404 186.592 205.713 190.01 208.172 cv
191.136 208.983 192.082 209.973 192.844 210.939 cv
192.863 206.624 li
192.866 205.942 193.419 205.391 194.101 205.391 cv
217.318 205.391 li
218.002 205.391 218.556 205.945 218.556 206.629 cv
218.556 207.312 218.002 207.866 217.318 207.866 cv
195.333 207.866 li
195.3 215.294 li
195.296 215.881 194.882 216.385 194.309 216.501 cv
194.225 216.519 194.143 216.527 194.062 216.527 cv
cp
.576471 .603922 .627451 rgb
f
242.068 207.866 mo
233.029 207.866 li
232.346 207.866 231.791 207.312 231.791 206.629 cv
231.791 205.945 232.346 205.391 233.029 205.391 cv
242.068 205.391 li
242.752 205.391 243.306 205.945 243.306 206.629 cv
243.306 207.312 242.752 207.866 242.068 207.866 cv
cp
f
181.611 173.839 mo
181.539 173.839 li
177.43 176.057 li
176.811 173.62 li
181.974 170.857 li
184.702 170.857 li
184.702 194.489 li
181.611 194.489 li
181.611 173.839 li
cp
.866667 .258824 .192157 rgb
f
182.52 193.58 mo
183.793 193.58 li
183.793 171.766 li
182.201 171.766 li
177.868 174.086 li
178.024 174.703 li
181.107 173.039 li
181.679 172.734 182.52 173.185 182.52 173.839 cv
182.52 193.58 li
cp
184.702 195.398 mo
181.611 195.398 li
181.109 195.398 180.702 194.991 180.702 194.489 cv
180.702 175.323 li
177.862 176.858 li
177.617 176.99 177.323 177 177.064 176.89 cv
176.808 176.777 176.618 176.551 176.549 176.281 cv
175.93 173.844 li
175.827 173.438 176.013 173.016 176.383 172.82 cv
181.545 170.056 li
181.678 169.985 181.824 169.948 181.974 169.948 cv
184.702 169.948 li
185.205 169.948 185.61 170.354 185.61 170.857 cv
185.61 194.489 li
185.61 194.991 185.205 195.398 184.702 195.398 cv
cp
f
193.321 194.489 mo
193.321 192.526 li
195.83 190.09 li
201.864 184.345 204.592 181.292 204.627 177.729 cv
204.627 175.33 203.464 173.111 199.938 173.111 cv
197.794 173.111 196.012 174.202 194.921 175.111 cv
193.902 172.857 li
195.539 171.476 197.866 170.457 200.593 170.457 cv
205.683 170.457 207.828 173.948 207.828 177.33 cv
207.828 181.691 204.665 185.219 199.684 190.017 cv
197.794 191.762 li
197.794 191.835 li
208.409 191.835 li
208.409 194.489 li
193.321 194.489 li
cp
f
197.794 191.762 mo
197.816 191.762 li
197.794 191.762 li
cp
194.23 193.58 mo
207.5 193.58 li
207.5 192.744 li
197.794 192.744 li
197.291 192.744 196.885 192.338 196.885 191.835 cv
196.885 191.582 196.991 191.266 197.177 191.094 cv
199.067 189.348 li
204.383 184.228 206.919 181.118 206.919 177.33 cv
206.919 174.579 205.262 171.366 200.593 171.366 cv
198.563 171.366 196.611 171.99 195.026 173.134 cv
195.283 173.706 li
196.469 172.916 198.061 172.202 199.938 172.202 cv
203.443 172.202 205.536 174.268 205.536 177.729 cv
205.498 181.711 202.599 184.901 196.457 190.749 cv
194.23 192.911 li
194.23 193.58 li
cp
208.409 195.398 mo
193.321 195.398 li
192.818 195.398 192.412 194.991 192.412 194.489 cv
192.412 192.526 li
192.412 192.28 192.512 192.044 192.688 191.874 cv
195.196 189.437 li
201.182 183.739 203.687 180.854 203.719 177.72 cv
203.719 175.269 202.447 174.02 199.938 174.02 cv
197.947 174.02 196.305 175.142 195.503 175.809 cv
195.285 175.991 194.992 176.053 194.718 175.997 cv
194.441 175.933 194.209 175.744 194.093 175.485 cv
193.074 173.231 li
192.907 172.86 193.005 172.423 193.316 172.162 cv
195.314 170.477 197.899 169.548 200.593 169.548 cv
206.218 169.548 208.737 173.456 208.737 177.33 cv
208.737 182.183 205.246 185.921 200.314 190.671 cv
200.04 190.926 li
208.409 190.926 li
208.912 190.926 209.318 191.332 209.318 191.835 cv
209.318 194.489 li
209.318 194.991 208.912 195.398 208.409 195.398 cv
cp
f
212.23 192.634 mo
212.23 191.29 213.138 190.344 214.412 190.344 cv
215.684 190.344 216.521 191.29 216.556 192.634 cv
216.556 193.907 215.72 194.888 214.375 194.888 cv
213.103 194.888 212.23 193.907 212.23 192.634 cv
cp
212.23 179.802 mo
212.23 178.456 213.138 177.51 214.412 177.51 cv
215.684 177.51 216.521 178.456 216.556 179.802 cv
216.556 181.073 215.72 182.056 214.375 182.056 cv
213.103 182.056 212.23 181.073 212.23 179.802 cv
cp
f
214.412 178.419 mo
213.638 178.419 213.138 178.962 213.138 179.802 cv
213.138 180.472 213.521 181.147 214.375 181.147 cv
215.312 181.147 215.647 180.452 215.647 179.802 cv
215.639 179.495 215.523 178.419 214.412 178.419 cv
cp
214.375 182.965 mo
212.634 182.965 211.321 181.605 211.321 179.802 cv
211.321 177.947 212.621 176.602 214.412 176.602 cv
216.16 176.602 217.415 177.907 217.465 179.777 cv
217.465 181.635 216.164 182.965 214.375 182.965 cv
cp
214.412 191.253 mo
213.638 191.253 213.138 191.796 213.138 192.634 cv
213.138 193.305 213.521 193.98 214.375 193.98 cv
215.312 193.98 215.647 193.285 215.647 192.634 cv
215.639 192.328 215.523 191.253 214.412 191.253 cv
cp
214.375 195.797 mo
212.634 195.797 211.321 194.437 211.321 192.634 cv
211.321 190.781 212.621 189.436 214.412 189.436 cv
216.16 189.436 217.415 190.741 217.465 192.61 cv
217.465 194.468 216.164 195.797 214.375 195.797 cv
cp
f
220.265 190.817 mo
221.174 191.398 223.284 192.307 225.501 192.307 cv
229.61 192.307 230.881 189.69 230.846 187.726 cv
230.808 184.418 227.827 183 224.737 183 cv
222.956 183 li
222.956 180.601 li
224.737 180.601 li
227.064 180.601 230.009 179.402 230.009 176.602 cv
230.009 174.711 228.809 173.039 225.865 173.039 cv
223.975 173.039 222.156 173.875 221.139 174.602 cv
220.302 172.275 li
221.539 171.366 223.938 170.457 226.482 170.457 cv
231.136 170.457 233.245 173.221 233.245 176.092 cv
233.245 178.528 231.79 180.601 228.881 181.654 cv
228.881 181.729 li
231.79 182.31 234.153 184.491 234.153 187.8 cv
234.153 191.58 231.208 194.888 225.538 194.888 cv
222.884 194.888 220.557 194.052 219.394 193.288 cv
220.265 190.817 li
cp
f
220.504 192.874 mo
221.698 193.466 223.546 193.98 225.538 193.98 cv
230.861 193.98 233.245 190.876 233.245 187.8 cv
233.245 184.647 230.799 183.039 228.703 182.62 cv
228.278 182.534 227.973 182.162 227.973 181.729 cv
227.973 181.347 228.212 180.93 228.572 180.8 cv
230.999 179.921 232.336 178.248 232.336 176.092 cv
232.336 173.912 230.802 171.366 226.482 171.366 cv
224.494 171.366 222.591 171.98 221.403 172.649 cv
221.617 173.245 li
222.773 172.638 224.292 172.13 225.865 172.13 cv
229.595 172.13 230.918 174.539 230.918 176.602 cv
230.918 179.824 227.808 181.51 224.737 181.51 cv
223.865 181.51 li
223.865 182.091 li
224.737 182.091 li
228.962 182.091 231.715 184.299 231.754 187.716 cv
231.78 189.133 231.244 190.51 230.283 191.489 cv
229.508 192.277 228.05 193.216 225.501 193.216 cv
223.651 193.216 221.927 192.655 220.77 192.118 cv
220.504 192.874 li
cp
225.538 195.797 mo
222.602 195.797 220.124 194.854 218.894 194.049 cv
218.544 193.818 218.398 193.38 218.537 192.985 cv
219.408 190.514 li
219.5 190.253 219.708 190.046 219.971 189.956 cv
220.232 189.871 220.52 189.901 220.755 190.051 cv
221.484 190.517 223.412 191.398 225.501 191.398 cv
227.041 191.398 228.214 191 228.986 190.214 cv
229.867 189.316 229.945 188.187 229.937 187.742 cv
229.904 184.914 227.23 183.909 224.737 183.909 cv
222.956 183.909 li
222.454 183.909 222.047 183.503 222.047 183 cv
222.047 180.601 li
222.047 180.098 222.454 179.692 222.956 179.692 cv
224.737 179.692 li
226.49 179.692 229.1 178.869 229.1 176.602 cv
229.1 174.89 227.951 173.948 225.865 173.948 cv
224.205 173.948 222.566 174.698 221.667 175.341 cv
221.435 175.506 221.137 175.552 220.868 175.47 cv
220.596 175.385 220.38 175.177 220.283 174.91 cv
219.447 172.583 li
219.311 172.204 219.44 171.78 219.764 171.542 cv
221.114 170.549 223.715 169.548 226.482 169.548 cv
231.782 169.548 234.153 172.836 234.153 176.092 cv
234.153 178.351 233.082 180.258 231.15 181.537 cv
233.582 182.731 235.062 185.024 235.062 187.8 cv
235.062 191.651 232.081 195.797 225.538 195.797 cv
cp
f
241.029 182.782 mo
241.029 188.926 242.919 192.416 245.828 192.416 cv
249.1 192.416 250.663 188.599 250.663 182.563 cv
250.663 176.746 249.173 172.929 245.864 172.929 cv
243.064 172.929 241.029 176.347 241.029 182.782 cv
cp
253.862 182.418 mo
253.862 190.454 250.881 194.888 245.645 194.888 cv
241.029 194.888 237.901 190.562 237.829 182.745 cv
237.829 174.821 241.246 170.457 246.045 170.457 cv
251.026 170.457 253.862 174.893 253.862 182.418 cv
cp
f
245.864 173.838 mo
243.48 173.838 241.938 177.349 241.938 182.782 cv
241.938 188.164 243.428 191.508 245.828 191.508 cv
249.371 191.508 249.754 185.253 249.754 182.563 cv
249.754 179.305 249.248 173.838 245.864 173.838 cv
cp
245.828 193.325 mo
242.254 193.325 240.12 189.384 240.12 182.782 cv
240.12 174.847 243.087 172.021 245.864 172.021 cv
247.996 172.021 251.572 173.39 251.572 182.563 cv
251.572 191.927 247.972 193.325 245.828 193.325 cv
cp
246.045 171.366 mo
241.538 171.366 238.738 175.726 238.738 182.745 cv
238.804 189.777 241.385 193.98 245.645 193.98 cv
252.004 193.98 252.953 186.737 252.953 182.418 cv
252.953 175.394 250.434 171.366 246.045 171.366 cv
cp
245.645 195.797 mo
240.338 195.797 236.994 190.799 236.92 182.753 cv
236.92 174.605 240.417 169.548 246.045 169.548 cv
251.509 169.548 254.771 174.36 254.771 182.418 cv
254.771 190.921 251.445 195.797 245.645 195.797 cv
cp
f
375.264 233.045 mo
311.216 233.045 li
309.884 233.045 308.804 231.965 308.804 230.634 cv
308.804 180.503 li
308.804 179.171 309.884 178.091 311.216 178.091 cv
375.264 178.091 li
376.596 178.091 377.675 179.171 377.675 180.503 cv
377.675 230.634 li
377.675 231.965 376.596 233.045 375.264 233.045 cv
cp
.988235 .976471 .976471 rgb
f
346.948 219.309 mo
346.948 221.096 345.499 222.544 343.713 222.544 cv
341.926 222.544 340.478 221.096 340.478 219.309 cv
340.478 217.523 341.926 216.074 343.713 216.074 cv
345.499 216.074 346.948 217.523 346.948 219.309 cv
cp
.737255 .894118 .929412 rgb
f
343.712 217.312 mo
342.612 217.312 341.716 218.208 341.716 219.31 cv
341.716 220.41 342.612 221.306 343.712 221.306 cv
344.815 221.306 345.711 220.41 345.711 219.31 cv
345.711 218.208 344.815 217.312 343.712 217.312 cv
cp
343.712 223.781 mo
341.247 223.781 339.241 221.775 339.241 219.31 cv
339.241 216.843 341.247 214.837 343.712 214.837 cv
346.18 214.837 348.186 216.843 348.186 219.31 cv
348.186 221.775 346.18 223.781 343.712 223.781 cv
cp
.415686 .560784 .607843 rgb
f
346.948 191.827 mo
346.948 193.614 345.499 195.062 343.713 195.062 cv
341.926 195.062 340.478 193.614 340.478 191.827 cv
340.478 190.04 341.926 188.592 343.713 188.592 cv
345.499 188.592 346.948 190.04 346.948 191.827 cv
cp
.737255 .894118 .929412 rgb
f
343.712 189.83 mo
342.612 189.83 341.716 190.726 341.716 191.827 cv
341.716 192.929 342.612 193.825 343.712 193.825 cv
344.815 193.825 345.711 192.929 345.711 191.827 cv
345.711 190.726 344.815 189.83 343.712 189.83 cv
cp
343.712 196.3 mo
341.247 196.3 339.241 194.294 339.241 191.827 cv
339.241 189.361 341.247 187.355 343.712 187.355 cv
346.18 187.355 348.186 189.361 348.186 191.827 cv
348.186 194.294 346.18 196.3 343.712 196.3 cv
cp
.415686 .560784 .607843 rgb
f
343.713 190.792 mo
343.713 190.792 338.553 190.719 336.175 193.962 cv
332.974 198.329 335.282 204.725 333.895 207.526 cv
332.508 210.328 328.637 210.785 328.637 210.785 cv
328.637 217.7 li
343.713 217.7 li
343.713 190.792 li
cp
.737255 .894118 .929412 rgb
f
343.712 218.938 mo
328.637 218.938 li
327.954 218.938 327.4 218.383 327.4 217.7 cv
327.4 210.784 li
327.4 210.159 327.868 209.632 328.489 209.556 cv
328.521 209.551 331.719 209.131 332.786 206.976 cv
333.205 206.132 333.173 204.535 333.137 202.845 cv
333.078 199.883 333.004 196.195 335.176 193.23 cv
337.899 189.518 343.505 189.548 343.73 189.555 cv
343.698 192.03 li
343.568 192.011 339.13 192.027 337.172 194.693 cv
335.496 196.983 335.557 200.07 335.612 202.795 cv
335.654 204.884 335.691 206.688 335.003 208.075 cv
333.834 210.441 331.325 211.416 329.875 211.793 cv
329.875 216.463 li
343.712 216.463 li
343.712 218.938 li
cp
.415686 .560784 .607843 rgb
f
343.713 190.792 mo
343.713 190.792 348.873 190.719 351.251 193.962 cv
354.452 198.329 352.143 204.725 353.531 207.526 cv
354.918 210.328 358.789 210.785 358.789 210.785 cv
358.789 217.7 li
343.713 217.7 li
343.713 190.792 li
cp
.737255 .894118 .929412 rgb
f
358.788 218.938 mo
343.712 218.938 li
343.712 216.463 li
357.551 216.463 li
357.551 211.793 li
356.1 211.416 353.592 210.441 352.422 208.075 cv
351.734 206.688 351.771 204.885 351.813 202.797 cv
351.867 200.072 351.93 196.983 350.253 194.693 cv
348.298 192.027 343.896 192.017 343.727 192.03 cv
343.695 189.555 li
343.953 189.545 349.528 189.518 352.248 193.23 cv
354.421 196.195 354.347 199.883 354.288 202.847 cv
354.254 204.535 354.222 206.132 354.639 206.976 cv
355.706 209.131 358.904 209.551 358.936 209.556 cv
359.557 209.632 360.026 210.159 360.026 210.784 cv
360.026 217.7 li
360.026 218.383 359.471 218.938 358.788 218.938 cv
cp
.415686 .560784 .607843 rgb
f
324.471 203.095 mo
319.668 203.095 li
318.985 203.095 318.431 202.541 318.431 201.857 cv
318.431 201.174 318.985 200.62 319.668 200.62 cv
324.471 200.62 li
325.155 200.62 325.709 201.174 325.709 201.857 cv
325.709 202.541 325.155 203.095 324.471 203.095 cv
cp
.576471 .603922 .627451 rgb
f
325.171 196.64 mo
324.986 196.64 324.797 196.598 324.62 196.509 cv
320.72 194.56 li
320.108 194.254 319.86 193.511 320.166 192.9 cv
320.474 192.289 321.218 192.043 321.826 192.346 cv
325.725 194.295 li
326.338 194.601 326.586 195.344 326.28 195.955 cv
326.062 196.39 325.625 196.64 325.171 196.64 cv
cp
f
367.757 203.095 mo
362.953 203.095 li
362.27 203.095 361.716 202.541 361.716 201.857 cv
361.716 201.174 362.27 200.62 362.953 200.62 cv
367.757 200.62 li
368.44 200.62 368.994 201.174 368.994 201.857 cv
368.994 202.541 368.44 203.095 367.757 203.095 cv
cp
f
362.256 196.64 mo
361.801 196.64 361.365 196.39 361.147 195.957 cv
360.841 195.344 361.089 194.601 361.7 194.295 cv
365.597 192.346 li
366.216 192.04 366.953 192.289 367.259 192.898 cv
367.565 193.511 367.317 194.254 366.706 194.56 cv
362.808 196.509 li
362.629 196.598 362.441 196.64 362.256 196.64 cv
cp
f
369.718 234.282 mo
360.222 234.282 li
359.539 234.282 358.985 233.728 358.985 233.045 cv
358.985 232.361 359.539 231.807 360.222 231.807 cv
369.718 231.807 li
373.424 231.807 376.439 228.792 376.439 225.088 cv
376.439 186.048 li
376.439 182.344 373.424 179.329 369.718 179.329 cv
353.485 179.329 li
352.802 179.329 352.248 178.775 352.248 178.092 cv
352.248 177.409 352.802 176.854 353.485 176.854 cv
369.718 176.854 li
374.789 176.854 378.914 180.979 378.914 186.048 cv
378.914 225.088 li
378.914 230.157 374.789 234.282 369.718 234.282 cv
cp
f
342.672 179.329 mo
333.754 179.329 li
333.071 179.329 332.517 178.775 332.517 178.092 cv
332.517 177.409 333.071 176.854 333.754 176.854 cv
342.672 176.854 li
343.355 176.854 343.909 177.409 343.909 178.092 cv
343.909 178.775 343.355 179.329 342.672 179.329 cv
cp
f
159.628 331.945 mo
96.3977 331.945 li
94.878 331.945 93.646 330.713 93.646 329.193 cv
93.646 209.048 li
93.646 207.528 94.878 206.296 96.3977 206.296 cv
159.628 206.296 li
161.148 206.296 162.38 207.528 162.38 209.048 cv
162.38 329.193 li
162.38 330.713 161.148 331.945 159.628 331.945 cv
cp
.988235 .976471 .976471 rgb
f
146.941 229.136 mo
146.941 243.679 li
135.299 243.679 li
135.299 255.42 li
120.769 255.42 li
120.769 243.679 li
109.115 243.679 li
109.115 229.136 li
120.769 229.136 li
120.769 217.594 li
135.299 217.594 li
135.299 229.136 li
146.941 229.136 li
cp
.505882 .94902 .937255 rgb
f
122.007 254.184 mo
134.061 254.184 li
134.061 243.679 li
134.061 242.996 134.615 242.442 135.299 242.442 cv
145.703 242.442 li
145.703 230.373 li
135.299 230.373 li
134.615 230.373 134.061 229.819 134.061 229.136 cv
134.061 218.831 li
122.007 218.831 li
122.007 229.136 li
122.007 229.819 121.453 230.373 120.769 230.373 cv
110.352 230.373 li
110.352 242.442 li
120.769 242.442 li
121.453 242.442 122.007 242.996 122.007 243.679 cv
122.007 254.184 li
cp
135.299 256.659 mo
120.769 256.659 li
120.086 256.659 119.532 256.104 119.532 255.421 cv
119.532 244.917 li
109.114 244.917 li
108.431 244.917 107.877 244.362 107.877 243.679 cv
107.877 229.136 li
107.877 228.452 108.431 227.898 109.114 227.898 cv
119.532 227.898 li
119.532 217.594 li
119.532 216.91 120.086 216.356 120.769 216.356 cv
135.299 216.356 li
135.982 216.356 136.536 216.91 136.536 217.594 cv
136.536 227.898 li
146.94 227.898 li
147.623 227.898 148.178 228.452 148.178 229.136 cv
148.178 243.679 li
148.178 244.362 147.623 244.917 146.94 244.917 cv
136.536 244.917 li
136.536 255.421 li
136.536 256.104 135.982 256.659 135.299 256.659 cv
cp
.176471 .568627 .541176 rgb
f
112.369 288.677 mo
142.698 288.677 li
112.369 288.677 li
cp
.988235 .976471 .976471 rgb
f
142.698 289.915 mo
112.369 289.915 li
112.369 287.44 li
142.698 287.44 li
142.698 289.915 li
cp
.576471 .603922 .627451 rgb
f
104.31 309.007 mo
151.746 309.007 li
104.31 309.007 li
cp
.988235 .976471 .976471 rgb
f
151.745 310.245 mo
104.309 310.245 li
104.309 307.77 li
151.745 307.77 li
151.745 310.245 li
cp
.576471 .603922 .627451 rgb
f
104.31 298.842 mo
151.746 298.842 li
104.31 298.842 li
cp
.988235 .976471 .976471 rgb
f
151.745 300.079 mo
104.309 300.079 li
104.309 297.604 li
151.745 297.604 li
151.745 300.079 li
cp
.576471 .603922 .627451 rgb
f
104.31 319.109 mo
151.746 319.109 li
104.31 319.109 li
cp
.988235 .976471 .976471 rgb
f
151.745 320.346 mo
104.309 320.346 li
104.309 317.871 li
151.745 317.871 li
151.745 320.346 li
cp
.576471 .603922 .627451 rgb
f
151.746 280.728 mo
104.31 280.728 li
104.31 273.544 li
151.746 273.544 li
151.746 280.728 li
cp
f
93.6457 309.351 mo
92.9626 309.351 92.4082 308.796 92.4082 308.113 cv
92.4082 302.177 li
92.4082 301.494 92.9626 300.94 93.6457 300.94 cv
94.3288 300.94 94.8832 301.494 94.8832 302.177 cv
94.8832 308.113 li
94.8832 308.796 94.3288 309.351 93.6457 309.351 cv
cp
f
153.298 333.182 mo
102.727 333.182 li
97.0375 333.182 92.4082 328.554 92.4082 322.865 cv
92.4082 316.471 li
92.4082 315.788 92.9626 315.234 93.6457 315.234 cv
94.3288 315.234 94.8832 315.788 94.8832 316.471 cv
94.8832 322.865 li
94.8832 327.19 98.4023 330.707 102.727 330.707 cv
153.298 330.707 li
157.623 330.707 161.143 327.19 161.143 322.865 cv
161.143 253.384 li
161.143 252.701 161.697 252.147 162.38 252.147 cv
163.063 252.147 163.618 252.701 163.618 253.384 cv
163.618 322.865 li
163.618 328.554 158.988 333.182 153.298 333.182 cv
cp
f
93.6457 285.351 mo
92.9626 285.351 92.4082 284.797 92.4082 284.114 cv
92.4082 215.377 li
92.4082 209.687 97.0375 205.059 102.727 205.059 cv
153.298 205.059 li
158.988 205.059 163.618 209.687 163.618 215.377 cv
163.618 234.132 li
163.618 234.816 163.063 235.37 162.38 235.37 cv
161.697 235.37 161.143 234.816 161.143 234.132 cv
161.143 215.377 li
161.143 211.052 157.623 207.534 153.298 207.534 cv
102.727 207.534 li
98.4023 207.534 94.8832 211.052 94.8832 215.377 cv
94.8832 284.114 li
94.8832 284.797 94.3288 285.351 93.6457 285.351 cv
cp
f
258.696 275.783 mo
258.696 306.8 239.196 331.945 215.141 331.945 cv
191.086 331.945 171.586 306.8 171.586 275.783 cv
171.586 244.766 191.086 219.621 215.141 219.621 cv
239.196 219.621 258.696 244.766 258.696 275.783 cv
cp
f
262.787 275.579 mo
262.787 302.67 248.278 325.071 229.369 328.743 cv
227.587 329.107 225.733 329.289 223.878 329.289 cv
202.423 329.289 185.005 305.252 185.005 275.579 cv
185.005 269.87 185.659 264.379 186.823 259.215 cv
191.078 240.816 202.278 226.743 216.169 222.888 cv
216.205 222.852 216.241 222.852 216.314 222.852 cv
218.678 222.197 221.114 221.87 223.623 221.834 cv
223.66 221.87 223.696 221.834 223.696 221.834 cv
223.878 221.834 li
245.369 221.834 262.787 245.87 262.787 275.579 cv
cp
.117647 .321569 .34902 rgb
f
346.824 335.98 mo
349.151 342.343 348.06 348.343 344.351 350.525 cv
340.642 352.67 336.497 351.034 336.497 351.034 cv
336.497 351.034 336.133 357.071 332.679 359.761 cv
326.897 364.271 319.26 360.525 319.26 360.525 cv
319.26 360.525 319.115 362.707 312.351 364.162 cv
302.388 366.307 296.678 361.034 296.678 361.034 cv
296.678 361.034 294.824 365.98 287.406 366.307 cv
286.605 366.343 285.442 366.052 283.987 365.543 cv
279.551 363.943 272.46 360.089 264.933 355.471 cv
264.896 355.471 264.86 355.434 264.824 355.398 cv
258.423 351.471 251.696 346.961 246.024 342.852 cv
239.951 338.416 235.078 334.416 233.078 331.943 cv
224.642 321.579 211.914 274.488 204.46 265.397 cv
203.914 264.707 203.332 264.125 202.787 263.579 cv
199.478 260.343 195.914 259.179 192.605 258.925 cv
190.569 258.743 188.605 258.925 186.823 259.215 cv
190.132 244.924 197.623 233.252 207.296 226.961 cv
210.096 225.143 213.041 223.761 216.169 222.888 cv
216.205 222.852 216.241 222.852 216.314 222.852 cv
217.987 222.634 220.569 222.27 223.623 221.834 cv
223.66 221.87 223.696 221.834 223.696 221.834 cv
234.023 220.488 250.242 218.67 260.787 220.233 cv
275.333 222.379 290.787 228.561 300.096 233.543 cv
309.369 238.488 326.715 253.652 333.187 256.125 cv
339.697 258.597 348.06 260.161 348.351 264.779 cv
348.46 266.234 348.206 268.016 347.515 269.797 cv
346.06 273.761 342.569 277.834 336.606 278.707 cv
327.951 279.943 317.733 275.943 313.078 274.089 cv
308.46 272.197 303.478 268.197 301.951 270.052 cv
300.387 271.906 309.224 294.089 316.642 302.998 cv
323.479 311.18 343.26 326.198 346.824 335.98 cv
cp
.976471 .666667 .560784 rgb
f
336.231 350.974 mo
335.651 350.974 335.132 350.564 335.018 349.972 cv
335.011 349.94 334.388 346.73 333.331 343.003 cv
331.982 338.245 324.994 333.395 319.38 329.495 cv
317.475 328.174 315.693 326.935 314.253 325.799 cv
308.308 321.105 301.096 311.273 300.792 310.857 cv
300.389 310.306 300.508 309.531 301.061 309.128 cv
301.612 308.724 302.387 308.843 302.789 309.397 cv
302.862 309.495 310.108 319.373 315.787 323.856 cv
317.192 324.964 318.932 326.173 320.791 327.464 cv
327.04 331.801 334.122 336.718 335.712 342.33 cv
336.798 346.163 337.422 349.368 337.448 349.502 cv
337.578 350.174 337.138 350.821 336.468 350.952 cv
336.389 350.968 336.309 350.974 336.231 350.974 cv
cp
.8 .380392 .282353 rgb
f
319.26 360.238 mo
319.259 360.238 319.259 360.238 319.257 360.238 cv
318.574 360.236 318.022 359.681 318.023 358.997 cv
318.023 358.939 318.018 353.092 316.616 348.16 cv
315.416 343.936 311.676 341.326 304.884 336.587 cv
302.462 334.89 li
293.98 328.919 286.34 315.788 286.019 315.232 cv
285.677 314.641 285.88 313.883 286.472 313.542 cv
287.068 313.198 287.822 313.405 288.162 313.994 cv
288.238 314.125 295.855 327.211 303.887 332.866 cv
306.301 334.557 li
313.32 339.455 317.556 342.412 318.998 347.483 cv
320.497 352.757 320.498 358.751 320.498 359.004 cv
320.497 359.685 319.942 360.238 319.26 360.238 cv
cp
f
296.779 361.113 mo
296.771 361.113 296.765 361.113 296.757 361.113 cv
296.074 361.1 295.529 360.536 295.542 359.853 cv
295.543 359.787 295.63 353.259 293.125 348.387 cv
291.215 344.677 286.87 340.976 283.036 337.712 cv
280.94 335.928 278.96 334.243 277.653 332.765 cv
274.047 328.69 269.195 320.079 268.989 319.715 cv
268.655 319.119 268.866 318.364 269.462 318.029 cv
270.065 317.699 270.814 317.909 271.148 318.503 cv
271.196 318.59 276.075 327.248 279.506 331.124 cv
280.697 332.47 282.613 334.101 284.639 335.828 cv
288.649 339.241 293.192 343.11 295.326 347.255 cv
298.123 352.692 298.022 359.608 298.017 359.9 cv
298.004 360.575 297.453 361.113 296.779 361.113 cv
cp
f
253.978 262.311 mo
253.576 262.311 253.183 262.118 252.945 261.758 cv
246.467 252 237.081 248.658 236.986 248.626 cv
236.342 248.402 235.998 247.698 236.223 247.052 cv
236.445 246.409 237.147 246.063 237.793 246.286 cv
238.208 246.428 248.046 249.904 255.007 260.389 cv
255.384 260.959 255.23 261.726 254.661 262.105 cv
254.45 262.245 254.213 262.311 253.978 262.311 cv
cp
f
207.296 226.961 mo
207.296 226.961 196.532 238.488 194.132 248.707 cv
193.405 251.87 192.896 255.47 192.605 258.925 cv
190.569 258.743 188.605 258.925 186.823 259.215 cv
190.132 244.924 197.623 233.252 207.296 226.961 cv
cp
f
244.803 296.658 mo
241.323 293.573 241.004 288.251 244.089 284.772 cv
247.174 281.293 252.496 280.974 255.975 284.059 cv
285.488 310.229 li
288.967 313.314 289.286 318.635 286.201 322.114 cv
283.116 325.594 277.795 325.913 274.315 322.828 cv
254.443 305.207 li
244.803 296.658 li
cp
.988235 .976471 .976471 rgb
f
279.896 326.181 mo
277.616 326.181 275.329 325.38 273.494 323.754 cv
253.621 306.133 li
253.111 305.678 253.064 304.897 253.517 304.385 cv
253.971 303.875 254.753 303.83 255.265 304.28 cv
275.137 321.901 li
276.573 323.176 278.441 323.801 280.331 323.698 cv
282.247 323.582 284.002 322.728 285.274 321.292 cv
287.903 318.331 287.629 313.784 284.665 311.155 cv
255.152 284.986 li
253.718 283.713 251.878 283.088 249.959 283.189 cv
248.043 283.303 246.289 284.157 245.015 285.593 cv
242.387 288.556 242.661 293.104 245.625 295.732 cv
246.135 296.186 246.182 296.968 245.729 297.48 cv
245.273 297.989 244.49 298.034 243.981 297.585 cv
239.998 294.05 239.63 287.935 243.162 283.951 cv
244.875 282.021 247.236 280.874 249.809 280.719 cv
252.402 280.535 254.866 281.423 256.796 283.133 cv
286.309 309.302 li
290.292 312.837 290.66 318.953 287.127 322.936 cv
285.221 325.084 282.564 326.181 279.896 326.181 cv
cp
.576471 .603922 .627451 rgb
f
270.731 297.144 mo
286.12 310.791 li
289.251 313.567 289.281 318.635 286.201 322.108 cv
283.12 325.582 278.08 326.165 274.949 323.389 cv
259.559 309.742 li
263.482 305.335 li
270.731 297.144 li
cp
.505882 .94902 .937255 rgb
f
279.688 326.378 mo
277.666 326.378 275.694 325.703 274.127 324.315 cv
258.737 310.669 li
258.493 310.45 258.343 310.143 258.323 309.815 cv
258.304 309.488 258.417 309.165 258.634 308.919 cv
262.556 304.512 li
263.011 304.003 263.794 303.957 264.305 304.41 cv
264.814 304.865 264.861 305.648 264.406 306.159 cv
261.307 309.639 li
275.771 322.462 li
278.38 324.779 282.643 324.26 285.268 321.294 cv
286.563 319.835 287.264 318.028 287.253 316.196 cv
287.24 314.413 286.548 312.823 285.3 311.718 cv
269.909 298.071 li
269.398 297.617 269.351 296.835 269.804 296.323 cv
270.255 295.811 271.039 295.766 271.552 296.218 cv
286.942 309.865 li
288.721 311.442 289.711 313.685 289.728 316.179 cv
289.744 318.622 288.821 321.02 287.127 322.931 cv
285.113 325.2 282.358 326.378 279.688 326.378 cv
cp
.176471 .568627 .541176 rgb
f
289.6 324.791 mo
285.031 325.654 280.627 322.649 279.765 318.08 cv
272.446 279.32 li
271.583 274.751 274.588 270.348 279.157 269.485 cv
281.29 269.082 283.386 269.522 285.103 270.57 cv
287.066 271.768 288.533 273.759 288.993 276.196 cv
296.312 314.955 li
297.174 319.525 294.17 323.928 289.6 324.791 cv
cp
.988235 .976471 .976471 rgb
f
288.017 326.178 mo
286.095 326.178 284.217 325.603 282.595 324.494 cv
280.465 323.04 279.027 320.844 278.549 318.308 cv
271.229 279.551 li
270.242 274.317 273.695 269.256 278.928 268.268 cv
279.604 268.135 280.246 268.584 280.373 269.256 cv
280.499 269.926 280.057 270.574 279.385 270.701 cv
275.495 271.435 272.927 275.199 273.662 279.092 cv
280.982 317.849 li
281.337 319.736 282.406 321.37 283.99 322.451 cv
285.576 323.532 287.487 323.927 289.37 323.574 cv
293.262 322.841 295.83 319.077 295.096 315.184 cv
289.19 283.911 li
289.064 283.239 289.506 282.591 290.176 282.464 cv
290.864 282.34 291.496 282.78 291.623 283.45 cv
297.529 314.724 li
298.515 319.958 295.062 325.019 289.83 326.007 cv
289.225 326.121 288.62 326.178 288.017 326.178 cv
cp
.576471 .603922 .627451 rgb
f
292.651 295.576 mo
296.468 315.787 li
297.244 319.898 294.166 323.925 289.604 324.786 cv
285.041 325.648 280.699 323.023 279.922 318.911 cv
276.106 298.7 li
292.651 295.576 li
cp
1 .466667 .411765 rgb
f
277.551 299.686 mo
281.138 318.682 li
281.447 320.319 282.456 321.731 283.98 322.657 cv
285.547 323.608 287.466 323.935 289.366 323.571 cv
293.262 322.836 295.899 319.449 295.252 316.017 cv
291.665 297.021 li
277.551 299.686 li
cp
287.849 326.189 mo
286.013 326.189 284.235 325.706 282.696 324.773 cv
280.565 323.477 279.147 321.478 278.705 319.141 cv
274.889 298.929 li
274.764 298.258 275.205 297.611 275.876 297.483 cv
292.421 294.359 li
293.107 294.23 293.74 294.676 293.868 295.345 cv
297.685 315.558 li
298.584 320.33 295.062 325.016 289.833 326.002 cv
289.171 326.126 288.505 326.189 287.849 326.189 cv
cp
.866667 .258824 .192157 rgb
f
283.424 325.106 mo
283.424 329.876 279.558 333.742 274.789 333.742 cv
270.02 333.742 266.153 329.876 266.153 325.106 cv
266.153 320.337 270.02 316.471 274.789 316.471 cv
279.558 316.471 283.424 320.337 283.424 325.106 cv
cp
.988235 .976471 .976471 rgb
f
274.788 318.042 mo
270.893 318.042 267.724 321.212 267.724 325.106 cv
267.724 329.002 270.893 332.172 274.788 332.172 cv
278.684 332.172 281.854 329.002 281.854 325.106 cv
281.854 321.212 278.684 318.042 274.788 318.042 cv
cp
274.788 335.314 mo
269.16 335.314 264.582 330.735 264.582 325.106 cv
264.582 319.478 269.16 314.9 274.788 314.9 cv
280.416 314.9 284.996 319.478 284.996 325.106 cv
284.996 330.735 280.416 335.314 274.788 335.314 cv
cp
.576471 .603922 .627451 rgb
f
288.49 316.432 mo
288.49 309.314 294.261 303.543 301.38 303.543 cv
308.498 303.543 314.269 309.314 314.269 316.432 cv
314.269 323.551 308.498 329.322 301.38 329.322 cv
294.261 329.322 288.49 323.551 288.49 316.432 cv
cp
.988235 .976471 .976471 rgb
f
301.38 304.781 mo
294.955 304.781 289.728 310.008 289.728 316.432 cv
289.728 322.857 294.955 328.084 301.38 328.084 cv
307.804 328.084 313.031 322.857 313.031 316.432 cv
313.031 310.008 307.804 304.781 301.38 304.781 cv
cp
301.38 330.559 mo
293.59 330.559 287.253 324.221 287.253 316.432 cv
287.253 308.643 293.59 302.306 301.38 302.306 cv
309.169 302.306 315.506 308.643 315.506 316.432 cv
315.506 324.221 309.169 330.559 301.38 330.559 cv
cp
.576471 .603922 .627451 rgb
f
303.175 316.432 mo
314.269 316.432 li
303.175 316.432 li
cp
.988235 .976471 .976471 rgb
f
314.269 317.67 mo
303.175 317.67 li
302.491 317.67 301.937 317.116 301.937 316.432 cv
301.937 315.749 302.491 315.195 303.175 315.195 cv
314.269 315.195 li
314.952 315.195 315.506 315.749 315.506 316.432 cv
315.506 317.116 314.952 317.67 314.269 317.67 cv
cp
.576471 .603922 .627451 rgb
f
289.724 316.432 mo
295.764 316.432 li
289.724 316.432 li
cp
.988235 .976471 .976471 rgb
f
295.764 317.67 mo
289.723 317.67 li
289.04 317.67 288.486 317.116 288.486 316.432 cv
288.486 315.749 289.04 315.195 289.723 315.195 cv
295.764 315.195 li
296.448 315.195 297.002 315.749 297.002 316.432 cv
297.002 317.116 296.448 317.67 295.764 317.67 cv
cp
.576471 .603922 .627451 rgb
f
310.195 323.744 mo
310.195 319.727 313.451 316.471 317.468 316.471 cv
321.484 316.471 324.74 319.727 324.74 323.744 cv
324.74 327.76 321.484 331.016 317.468 331.016 cv
313.451 331.016 310.195 327.76 310.195 323.744 cv
cp
.505882 .94902 .937255 rgb
f
317.467 317.709 mo
314.14 317.709 311.433 320.416 311.433 323.743 cv
311.433 327.072 314.14 329.779 317.467 329.779 cv
320.796 329.779 323.503 327.072 323.503 323.743 cv
323.503 320.416 320.796 317.709 317.467 317.709 cv
cp
317.467 332.254 mo
312.775 332.254 308.958 328.435 308.958 323.743 cv
308.958 319.051 312.775 315.234 317.467 315.234 cv
322.16 315.234 325.978 319.051 325.978 323.743 cv
325.978 328.435 322.16 332.254 317.467 332.254 cv
cp
.176471 .568627 .541176 rgb
f
135.794 359.464 mo
135.794 361.344 134.27 362.867 132.391 362.867 cv
130.511 362.867 128.987 361.344 128.987 359.464 cv
128.987 357.584 130.511 356.061 132.391 356.061 cv
134.27 356.061 135.794 357.584 135.794 359.464 cv
cp
.988235 .85098 .85098 rgb
f
80.7101 263.997 mo
81.0644 265.805 79.8865 267.557 78.0792 267.911 cv
76.2718 268.265 74.5196 267.088 74.1653 265.28 cv
73.811 263.473 74.9889 261.721 76.7962 261.366 cv
78.6036 261.012 80.3558 262.19 80.7101 263.997 cv
cp
f
75.6072 248.916 mo
75.8496 250.153 75.0435 251.351 73.8071 251.594 cv
72.5707 251.836 71.3719 251.03 71.1295 249.794 cv
70.8871 248.557 71.6929 247.359 72.9293 247.116 cv
74.1657 246.874 75.3648 247.68 75.6072 248.916 cv
cp
f
362.902 308.714 mo
362.902 310.58 361.389 312.093 359.522 312.093 cv
357.656 312.093 356.143 310.58 356.143 308.714 cv
356.143 306.848 357.656 305.335 359.522 305.335 cv
361.389 305.335 362.902 306.848 362.902 308.714 cv
cp
f
367.758 288.173 mo
367.758 289.154 366.962 289.95 365.98 289.95 cv
364.999 289.95 364.203 289.154 364.203 288.173 cv
364.203 287.192 364.999 286.396 365.98 286.396 cv
366.962 286.396 367.758 287.192 367.758 288.173 cv
cp
f
249.13 76.0109 mo
249.13 76.9626 248.358 77.7346 247.407 77.7346 cv
246.455 77.7346 245.683 76.9626 245.683 76.0109 cv
245.683 75.0589 246.455 74.2874 247.407 74.2874 cv
248.358 74.2874 249.13 75.0589 249.13 76.0109 cv
cp
f
107.23 135.688 mo
107.23 136.661 106.44 137.451 105.467 137.451 cv
104.493 137.451 103.703 136.661 103.703 135.688 cv
103.703 134.714 104.493 133.925 105.467 133.925 cv
106.44 133.925 107.23 134.714 107.23 135.688 cv
cp
f
87.0965 181.684 mo
87.0965 183.303 85.7838 184.616 84.1648 184.616 cv
82.5455 184.616 81.2327 183.303 81.2327 181.684 cv
81.2327 180.065 82.5455 178.752 84.1648 178.752 cv
85.7838 178.752 87.0965 180.065 87.0965 181.684 cv
cp
f
272.702 113.766 mo
272.702 115.622 271.198 117.127 269.342 117.127 cv
267.485 117.127 265.981 115.622 265.981 113.766 cv
265.981 111.91 267.485 110.406 269.342 110.406 cv
271.198 110.406 272.702 111.91 272.702 113.766 cv
cp
.988235 .976471 .976471 rgb
f
77.4377 165.168 mo
77.4377 165.857 76.8791 166.415 76.1901 166.415 cv
75.5011 166.415 74.9425 165.857 74.9425 165.168 cv
74.9425 164.479 75.5011 163.92 76.1901 163.92 cv
76.8791 163.92 77.4377 164.479 77.4377 165.168 cv
cp
.988235 .85098 .85098 rgb
f
145.487 352.975 mo
145.487 353.745 144.862 354.37 144.092 354.37 cv
143.322 354.37 142.698 353.745 142.698 352.975 cv
142.698 352.205 143.322 351.581 144.092 351.581 cv
144.862 351.581 145.487 352.205 145.487 352.975 cv
cp
f
112.369 344.407 mo
112.369 345.16 111.759 345.77 111.006 345.77 cv
110.253 345.77 109.643 345.16 109.643 344.407 cv
109.643 343.654 110.253 343.044 111.006 343.044 cv
111.759 343.044 112.369 343.654 112.369 344.407 cv
cp
f
344.324 294.84 mo
344.324 295.901 343.463 296.763 342.401 296.763 cv
341.339 296.763 340.478 295.901 340.478 294.84 cv
340.478 293.777 341.339 292.916 342.401 292.916 cv
343.463 292.916 344.324 293.777 344.324 294.84 cv
cp
.988235 .976471 .976471 rgb
f
181.597 119.68 mo
181.597 121.09 180.454 122.233 179.044 122.233 cv
177.634 122.233 176.491 121.09 176.491 119.68 cv
176.491 118.27 177.634 117.127 179.044 117.127 cv
180.454 117.127 181.597 118.27 181.597 119.68 cv
cp
f
260.342 121.054 mo
260.342 121.813 259.727 122.429 258.968 122.429 cv
258.209 122.429 257.593 121.813 257.593 121.054 cv
257.593 120.295 258.209 119.68 258.968 119.68 cv
259.727 119.68 260.342 120.295 260.342 121.054 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (MSI) ()
%%Title: (2010.i606.001.P.m005.c20.online medicine set-05.eps)
%%CreationDate: 1/28/2021 8:52 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj9?5dcgWlcSPU;=\'Zc;7C_7">?--9H`8HlpTJ-*,NggP"b#UqqH$h02fuoQq><@nX20NVc;sLWiiM,X'84ifq@)u<#aHB
%i31DT\uqm\$$FIV6/e0*Rt(FB[.M"WlF.Gbjb%T_mPd0SXe>$igUWsm[+_"KgeY,93qBH4M3iPOf4r-_<4:qSDrI82JU(+kf).k]
%WdC;$Q.?dK^L/_0DSo]*!<-SLqr47YTJO@3JY>?`Lq[uBT2iK+./RZQ_l8,kD0K/iV]%BUXWVB@^uA(\q+Zo7JAsKG"TDPYLT.q9
%j`P>ZhIe=TJtJU!'K34b3c6.;c/,b!,JsH-`'=0<`!HJ8T65bcO3m`QiGY15;[2^Rj<Te7:l\pt.DphZ<4kKm3^CbA)^OHO.qmMI
%enocTF<OE$Y;^6'a(LT.>Vg3uSn;^+hq6g33m8;1J)\n`"oltE)uaV6lu0=$dtU,IAAS:Pom^eTT)2j5Di#phZoVjM^L:jd'<0C_
%pp=8s>H]!r%ZK(M0UL,:;,Hdu0Z*&H6Hs$3YHWWW.54A#le:fXfES`9:=a%"dH%X#h0RKGl(_o)dE-CWDj5i4CnU+4E.LO/:!kf*
%;T*[MC!G"E9!Jb3%ACp<b@\!gCdGLHj!:4HZlZ]Vf@@n'\c_PB;'H-g^K%C(Ebs3h_uF+DU`JQ(=8j]S$`%u-IRB-ed#6\AZ6H[J
%d2@,@f;Rb^3mL#1s-eYLd"#\*$a.ItkV)9?1sp.I=r?2WAH4A_)qaYPJ%XjgS;WS7(EW"RJo:1QE>AEIa)\$i>l(F/[Ge%Y_\@I/
%P$2HOYLWF\Zu4j+#8Q-S<dWQ$2HRmTH?SUuau@#Y$L#6=pl/YK">,_O9'Z3B/,TQT6/@\R[Ce7k%"Ae-Ou*HNdZX7?]Bl`l^Id8e
%`<1aR)W8uU`co051mNeU?BQ("C0nenKhR]:oGsNJ0WS'7M!0'>->F2^]*W:^Xi)Su/;!F@;-.)e#4.$#W3jInq-TnZ,;gI,UrAj*
%X&Z?-?Lt$t:1[Ycp._P$"LYK,!RJZTe7\+[^6t(ANo+Rk2`Nu!]aBGL%RJ/*GG_mZn?"u>_8BF@75AJY;M@P(7(>bHSGhqB.i#+O
%M1kEcBDjTa<SR2NFVSou\uf/=q.DqH*C%qd5:a(V%H:7_;91*c^(Zi^G:tpm=4IM"$E:@L[Gsbm1T37["&5?BGYOfM87J/Z9pul+
%f2TAi^-:,B&WK";Ha=50Uk:kR7ef'Q$%I;K<."u^#lC0rQI2>o>!L%ig.Ess<Ne:<iArZc<P@aBHr+?hJ=(&Y]O%-!9sn#9q$i'E
%;]>t7TYlQ[8*;7_%1ef5V3TQM))U$VNh_!rC0cD^f+=1$=6CFQ2':)MP417.#sTe-!n!/BET:-(D`S1QObhI\cAu_:F-D+mJN##e
%!p7lZ&aO\aY1Rc-Yt"ll@b?m=137DsWASV,$Sn<dC*`m\LpWIa`7(Rs45JI6"HSPJ5Fr\hXg-Xe)kRs5j%3t\m;=M4HBF#I,);2V
%V9uCeQTO&J5KNt+OXFbZd[E1fX@oba(L$gI/dQ)&PLb@N.H28^=f2Vpm!&Td$kH9(8L?'ESP[uJUO\;t@(aMR9B27k1@W]_0Z>N9
%g).9l@]CNT-7*G?6+9kfpN^_KKVCj;9obg="&t'^RXWG4+>NsH&aG&$$]DjT/1O;s>^k-MR-->U!#p4`.^cYijedW_74:*Cj=EX.
%Baj*^74<B1o"_T8]aUq.75-Z^Qq7O($&!C)K=M+fPXR.4LufDWg`i'M+^u&,/Rl7TQIk@@7!$J+R.bdMR'1`e&NMW[cU"@jotUC3
%ZQ$(\r)dc@JQ#_;%b#uM)B?+GQ+[.1b3E^T\X=rDA/uU)V>j`.As-K9^=R52X'R#4>R%+\D[rqQg4!\Qn7Q_I-.<,umlDiC"I17(
%6tLtQ6kUE$\9+"N-GJ&lfi"6[<F/#t%'03Hm!Qj7S)J?[bfp!d--6T']LdqsejLU(LJ>uZInbl\"N;DKDX5Fqqe'InRA@gK-PfKk
%#m^X,m+/i#hI"O#iAZoj?2lDg,;;-+\Y.@<G^#l8H=]PJNce:L&r=?1B.A_'Ll<e/<NOY[AGi!KN5$b.A"3\P7]2V)YHmm!L2eQ+
%C/Oa81[4PUT3lQX&:3X93YKcce@Rc"?&iXK!4?QsS^a/S'l\pS1\Jq@hR5HYGTjQ6nf]IlLc!)Rs/hlG#(=)G@2POi)T^uQn64Af
%:#57`=W%1gYY;0L-.,u,FFK2//-`q7ff5@ah4,_)FmUD$kM4g[ch[@<UKCLkr3GD:dd3mW&f$X)H/`YsML<Jb(&@dR*88I;5qUj^
%rP'"^8'ZH%;hCOrbbQ\Nj<sCMS[4DpSathE8LM#7T]K1Rh'Dha,#4#a8el8MSBm_k;:'(7i6?i[*/H$P6g!X+<g"[Re#p\+b%m]`
%(<S/lJkqK"S/q"iM[p%dXU:YCosOdW.sWMQ^h:.aFq,&&?RE%9Z_FW9e;MW1Z1nGXZoAgcnlYh>Y,pkHSk2%p);,FenI#[VLK.'m
%U8C[Pbk*QK,V+9=X/LL?)P79I$08(VoSgk%%u4[.C^fHD]LKfBSbY/:JW(lOKRL$tMS@OB]=3!^YQ'jo>FU#Jh5km5+$]dGj>CSu
%jO?>+0#?,tCd^;j@d)LMT>1/i]'4>=VVU`0+9+t+r?SY?j,%>3P6<iXEPabsIi3'eP*g.cG*sI]0Jb1%adL=T]_3Sl,Yc%R9;8V>
%E?%,YX6hBFREeg?<_HJE<1DZr-4n<pOMiLR-:^EJBI&rTY?^MH]-B3R<H;("8WhQoRH'igZ:^sNhni#Q=,8mdWY4N5Pr.1i91HjE
%qVq:6,-k6dpg/RD!"bijnVa1L.#UnL7?gmNiVabYe\s\2Nn6neC2hCRBtjf3<0CL"`Nc;mA\)U[od%P5ThR'B8MD0OrcKCi6f:Zq
%ZLAd_H6R^Bp:EdJ#8a_3kG](?#r0mN"O'0CA)19eU.iD_T#40bniTpH,e;lL#"qf/TA,j[>*L:JC[0/W+s12iMt3K6`B;\F,U$dr
%(WUpQUAX:64qStO\B'S3PXR1HU))j?[MG]%:UMTBLm`_h3L@-%A5S7?/,HB\W(!-R>*L:r2#XFl!jsG_YY-d12)U3nE^o23[P,s"
%<2R*kM:oME@Wj*X[uOp\,FGP/$Sr#(H$4\X`@oLucD(9+[i;uDjM_qEbY12FG/mg!(4,@#HHfXW[<^5:$)Vg<f+r[L:A*=I$Qoh$
%D>r&=4Lo5k$L'mX/[X6f[+`B"Rld`1:X7Z\X"C^4S[=is,BWI6.hcMl\KtY"^YOd<W=?Y^1:m?<Z5:\4!=K[dBX*M*1@ma%&Y>3O
%?[hC<k5Dr[LLZdMQ80*faDp@7-E<2,E+`/M[JY>)oVRRM]=_]pn];2FHnoT1c2Ogmm3^\:17l.tXXB=Gon9-^(=c=$KKljYr4<-I
%iP/Ud+SC(2W[Dn5Gs8BTq*!?(9SAXFUZ,W\)oFlT*EuB8hs9>:c&[H<d0Sec2nhtTCNQ!.'@ns<]Dis@\l1^c;]hS.[Z=&+<;L%W
%F?hjb2hO#ekMpH3c_o*J0"CMuf[Lus:T+GoI>`%-!,$[T/19&sb\McT\p`t+2J;<?^tlBje16.Sai`@HgOLa_LbuB(1B@s&WjQ:m
%kgM[*_s!',5UK!Rf;a"3l@(+;\c8Q3AnhK#M;l+Co4'%YE?jJ'2Ki+FTZ'L;[Di.6m-ju"_``X1rSIWL=mZ/@p4!nU^V>Q@`E+^)
%A,hl5#2B6Vg/^NbZ.SYRm.i:-I"uD$`La9-g(o%L':YkuO%:%5^=0"_.b1T#DN`=ab`!H29[V@nQoWj^9lR"8]A'oKT^OGrL#OiZ
%8^[4[YLS4Hj,'g:YAZIPY[5?(>n`=Oqng;,l(hK+l+G!>VjJs-6?5?oK!e&\V:YH26G#'kk$X;p>@bf%Ps7m6,o::$7@NSX2""T"
%/`1J_JKs;q<?%4gFg1PP)V"]1<m.[_"YHo4FJj+*o4N.88_cc6ClpsZ0<V6FO?<2Pn@+)8-3\U&)Sep0PP9:/hX(aKaC*6U9$@U>
%C%>9dQ5@rhQtU>/T#V.+iU"dafXI?!)-l+NI%:n;P@P&hf5(gS>k=J#8MY-lh<k0kKYTKC>,)%^M%Q,jY/o#I+n*kZas-A]8A$Jd
%08mcl,4RFXM&2:diJAA5KjjeD7H.m@GZc:u(5WiAZK>PIJ!!!",`qFRO>@L</2BapQU.(L"6OfrV5[7L/M<N[7SQ^[G##^8crA=B
%We'7(LXWF.k3\oVo5Mf>&fRYGP)1IY(b@;-Qsp*n?b9iXU;h2EDIL,O;`XLd1:[Ln0TK(@=Jjn6/oG'c@cOu.Ja&eHH\QD'XIM^a
%gqL/hkMl33)81I_m)H(/5CW:'G@j].c.T)o"IEiIjJi'rEV=)TR=hQ@[bnp[\,8k8adJQn1aaTl#sRKS8anT?L,@.3%("J=)ZH3#
%RQkCWk'o)ipa=3n<]'X.Jq7X*RGYOC1cpo,LsT`W6<bi"dWc'm@LN1(S2j536kZ7W6(:Pi/HHGBI^0lp&921?(eMgE;6;)nU_A!:
%,3FA,O7A.3OIeo0C<lAeefp/04-%l9O"nmPBhn49c5bn"P0gGS@naG0?0!`;<K/[&(lLMrN8u_mG9XDSQ`)HLhW(rCQ<3L![?j0:
%a^GAPhH55[btj"gEe:NBB"[1M2l8FCojaB-mthObX2pJK8kUPAkiU</qh:@9Xm7pg8K?q8r(5;e#gPK]:3fr"/s[nN]Mc/'B\m4N
%e%E&brk*B!!nDbKVY93<U*2+Zi1hBb+Go%a-E/s?f-S\cF\,/`e)Ig3!L,0R9DT)Cc-*dd8_h1`<_uS$OVlfJ-s9doo\7hII];)5
%m++H%c>lg%IdRM6'H0[BB$TC^OPdQWk:0>tUag$"bIs(#0^Zhcg3aW^,pHu!lkLifVID&!E^VO7*@h(2g/.!lF3A043roYVUCDn[
%[2q-6T:dbo'`RKS_Bf*/74d&'!@A]-,u])IBPnF,/Y]dE1q/;'(=CoV'f!VR>QUO<hP7VA/.\5VGV6fQ">^n@-(nubc7QoD76%a^
%k8*%3,+Rt]P]\_d!F7H)VEL_2k:<?$7*[!PS$%k@4:!Fg/MDtZR.kiCcE:YJ&15W^FUST&`_ZJ'M`Erq]!tgNRWUqNl3;cA>!6qI
%6,qoYcT/W\@ku0i)E;d8"6H#=26VD>Q/\I0l'8<?T::].L@*:4>*:GE^mgS0-2\8Mbc'WVo_`G/r-'`f!XddXY+iHbrbZiK?LHFg
%g<<7@%-41IWe+sZC_d?AC".'X^UuT`8hKkJA>`_,bt1HiTJ31tD-_Eus/bQ5F#IOlPG7B`9qi<%2=]5mohgTOV69QH8^Wn"':MLj
%/VZF-<!a"s$QADm2tSnkYt2:sNJ'3(g8k;g]m7,q`_(1^P[B'X,trD2\.]N\4b4gMriXhaM71l"bR(mWq'oT(`FO=aCVOp5C^h27
%p74cnmS7*rSf*T,i<Lt4TLnuG$#GH'G^FotK8-#>BBXhVMHqDdfK8jrrNFGN;mc%N(-^.GSkjGTf'pO*RQ@?[hTE"i1eUd9lRe:U
%e#3T6#OLVE%4'8C:VR83N<O9b3LD[qL>-,_(b,uN1sIic]>l9gK0IiUc0[3T(_("r1jH-;kGIYpq?k,)2(VZV?qE3,/R946KlR#l
%53:95aQ-:,Y`2Rj=/Oe3-CKXCD4G&9qd6[hZ^=$bHu*cqSY#YIO5E!UR?WLf]YeCK"XCA;gX"uZhA/&VZES3>54ph#?\G'AMi$^?
%1md-hL7-EIqs\cU6s7kfWpmXQV5[7(OH_*k)>#G4N2Mp=9VV;-il!(R>0o;K[FV3Z:!DkT^3REY@kKA#bhnP&4O;&YIp_2I10::u
%LbYe+Nf!GJ,nnb3mP1i%bG-n$f*)*eFZ'@!LNa"JVI#04.dX$<+!`g93&:nm,l-*\9`!4^e)1UhqELL9[o\$Z:i4HUb3(]dTNU%a
%mWb'ifJ!ul8X`8U)oDr1P;Kld_k+(j.<HNje!X/[o-@j\4/Je9?-N!Y@Q%pT,P/+_Z4ef"@3H+%GqQM;7f+[WQP?;nk)g"BN1MgI
%mEWakVEXHg2eRH!qH0OWrkY\?P.+,ep3SX4/4MUCeW@,#>aVo3bMP..4+7<H.<@b]MnMS+r"p'!R0^BK))P*]'mAEV\q"GllY8e8
%o&h)JS*ZQ\T:OKCnE2P'0FJ:;;[G)T<4:=ohkZ:FL3N$o;TGmHN,dXj'RuSCC:3=a[sJ1a'EkfQpp42=)=Vl\-']5J![?XAq$j,/
%)';a1CkO=515-VqU1rt$r.ji`P[?Y&QTr[#3bN[\GT2t/Mam32_>]1)EqofnK*PTI'1gDAO:o!4c`6YMbn#rDe1pqGMeMUP[iRk2
%iK(A-g(oBE0Q#JijZdk-Zq^=(l`Os5n:Tp_2%`/'0eEU'VW"E/B!<.UQh0nurp:8GI0J76?r-&9p#2+#Wr*/6:N;(RcP79>.hY?$
%<lN`\"t?@.kLk\no/dtb'6eJReC^Wf#p[Ht*1d&T."qt"],Ip_1",.oVso/Idph!>i#NI#p2B#)r5#"TS<O9KDY]gYdNfm3WF`<R
%e&6A<b@3\d5;'YR>SPDg%9%<gr*`LT&.R`EJ4oD#48AQhNikffR\iia9cHX>->gdL-IP@7lEDY%@;B\.FH*dG5,((rc!*Bf+dSPM
%hm)QJG/qI/.G;)2o?fV1A$>to`6fQ8P3u47Yqr&iZ>;u99KDuY>)oG79bS>3"qerE(i%OLTT5$aBc8^/9:BSI7Lpjd+J3&^/i&$5
%NB.P+8uVop;VbBB[9sJ]HpQ@i6EjU`3i7N@NB"A$57BG:pgI?pm4eOtJ"n0&(:6g:OPM'6N2Um>2@]Y_Y#,W5BMt>(-=@0S_??I_
%^i%`.=9?(mC>mN^%GD"%Ap54rBj&nAK<6S3!uDh^TJ*`]d]VWGF<NSr=Rc?J#,t1V(Bc)rs&@_u\q-TXgUb[45[6eai`Mtk!ksIr
%P_nUZC_g[a-J0(h!WH&e21W)nFop[B8V[e#X-._#!S;bp6aj!6N4#`e6Z#hID'm4qM<L8E"i8\rmb"7E4G<`TacJ;I;7JlUQlN(&
%Zs?CIE?Na27cFp\<Wtd,B[@8sK/coKj?W2930(A'ed[h&e\n`X:=M6:J(ll#49g\HTNsHgaX&+k/**YP33"^eF_.e]!-Ht-EppLr
%Em;%C:6uDje+qd/YDrhQ%Z*N'#j%=daA`rZ!$k&TVI]k$_rT?i:aMbANg;5ker0`gd7\GX&ks*fc*l:LFBf8D16!fB03oN!LC[pR
%'W9-1["3$3<:0[FKsPZqZ_Tt_X<g@=Z"LY+U12'GRBGqEN5KIK6Bgm\_WOW..Di#BOF"f@g,@;KZ$!!L/mFaTOB2m5+k-C%3+L$2
%*!_9#/E<sK^'7753MIqAPAFcO6ITs6$XEni&[TXYQAq[;6\bYH55+L4BDjTa@8m2%FTm,b_g2lHc3NHKh/@E+?3_=RFKltikVV4)
%@t>'hPc/61j5D]q+GWh4J(;arl=H?h^N;1c=Bi@=Iai%<I.ph3Xg+!,+QJ*ZREoh/mJ(%$SlLcC0g;04]NS.GouGnsa@7@Nf;=/8
%bA%,DF#gs>*H4;VcMYs\7SNqN<V0WI'`XaR,NIaZMe&of@]DZ?b"+;:',Q>6.tu7:ajgIP:5?V0S`Ob$'@`pFrV]b/h/%ETCnhGn
%FdQE3s,2#@2SKUn^E1^K/`l]VO"$1Z):7I3>.$IWC7NuhCf)^jEU%nY;:D+Qb,7XAY>^cI&6KT,QE[X7);$Wl:'k@YZ.q0hk5&2k
%P'm_0%7U(2r%q76fP0*Ia&AAhoC-QAd0JYY:EM!XC_2Q"lS@[SZVg@u3leAfp%YXB2OOK1VT,fI$BsrPAV4lqo#l.<]Yoba-[Y`E
%TN1a+?T&#==4Na(&j%]_.f**q!,]O3(kE^2FmXCg_88$)q]MMebl3sk.BT8&<>s+_E8C*>mHXFVZ$$P*>3'-$NILiSY8lVD-`mBF
%3Y@p2mn<nej,H=Nlr<<$^D!K#'^VflDtu\Mr@a!k"3o?c7t#)0:9'18'sq^c*>SKE;5Oi#0:Bg\dAM]81"+b]Np\f`nJA'S9!!O[
%A!t&R]iqh-/7Jm)VoB5dlXp((R?Y5#Sr+Zt29H7QVJ9N+Wuk7pNk4-<.UHc?RHM0j`r4MAGu,*"I#6FLJfRqIfp_A20Q;?51bNo>
%k.j]6YSOq:[IB?de9.fq8[ZCap?G,cCjJgj"]+I?>'+q/l,(A2&u@mte[Z+$<[G^K?^@FcbG\o+'MfiRVQ$'&)^@%'hbW%6MEJ=Y
%AXHsHDM>gGfOc@-@d/moU<5(CSCdQ([Eg%gPDJCTUe\^boip>P<6>0@PM3':45OOK;8)qRHnSkF2s^u),gn5YW^f1GTe5:_5LopN
%3f2mq/-IN[18nnKLnnK/]E;Tl?bUoUZ!Y1-GL'XMmeQ*?qp[aM7*dZK7aPQfe:)I.--rF+mam%`YBK1i]<uf-AT<8b`KZB4dIG8R
%TW(-A@u26F_b.8((0H:k_8JoZeAKL=e#QGof0nG1htFq&.^j]eZ/#gL$LnA#9Xb\2:;(hkD[frd0^Wm@VlK+a<gsWJl*Hr&dFbpf
%TR7]#4!=>b[je6B_i\<*G3c,+*uaI&6Fq.(=:8P'!>pQ/1KCBIs3cGZcK)0m;RS06))<-7rlB$8KZ()d<Vhi*e7,U$G<8M9j-Z1?
%E2iJjYNRjH]ABrf3XM5uS]\f0/"EMX[;%Kt$;qbH,)7e<\:\haf:I=0kRT`K>6js^HT]rK$#tkhfrH9W@b</"$+Ep=lQ5?b>@+.0
%6-?Jaa-A.1FR,9mK1<i[$iWieT+'pe]IZ-QD/eXer,Ti]Us;"e;mc)3s4P^pH>s-Ua_rj@.YC.98mR-+i&*RG'M,Y[7=1H4Bpr']
%a_rs?Kl4">Vs02u_R0bI#:MH(Bc:Ni<c.W2G,H)1L-DB+-r_@IfZPf5FJarpGJ?%Db_$i%JD-5+`X/L2"NK$r<`Qp3qdAtIQp04#
%WtQAt&]eW[A%6O?_rl$8rdd';97#OD#(?oc`QlV;g9B;bd@:[+>>puEi4Il]@aU:uSK1k.fGcENg=F"@+^gX%_g:\K_3)EqE=%m4
%gc#*=%,!LQD"5Y/kn@IO\jN;qMm#iM0Wr^Vfi_cW7P*<&.>\>KVOj-7MQ*[Y^."==W2.q9X/B$RqRZ'l%dKuS12Z-d50%JYlho!@
%02/m>nUlDCk]M:'!XqDT4S#:k]o$<6YOi<m&+Q`JGnngY0St\Pmbu2PUKm+O8G`&DA6?#u3gCG_j7*ngPBu&`r\_2k($ipk%p%"+
%dWr5t$%B7.=eq]i@noh'V@T+[qkp_).@U!m28b6I7VkuK0Z0M4<,6q>,'Jo$<<A4Fohj0HkuZd878nMpakgg2<'SdD@qVU`%O?9p
%;Wcc>1\smMUA%9rE,LUG>.%#l40FU;I;3euoM2SM6O4\'Rai&oNdE97j]&ij?ZO$P7Mm-i?XmEk#E//?[t_#T0s@#FlnuCN[YFC%
%TRP42Rim^SO%6Bar>TDrZoMRL$q#-`UYH+--&I52.Pck`bY*aob+I_>mrNW$>8r.>[,7"t/.K[K%`7*6MW"%rrEJk,FMU`U`AZeu
%W%N`,Jj/H,cY3G)d,Q/a/.<@pdjp%Y[o[KkIcgQ3Xl%;AqTe[4ifg%_nS62'!T1?g1/dG'LDY(#6T)Rqkm$dkNb<L<e\STm5?c]/
%@,sMk2?C-ahFqZ/F-\mIE6Pt%`f)``rr%&K<MCT(iW&oGBfs?<!EA@Wl[sS"YZkjp6#E>\g.noZ<iKTnP(lAVHX%%a'aRM0M+VWt
%$p*qA<-idXn6'>t(2eGYHWuBE7[/eep_mD7+g/";ITYYgp#=(%:((OTn^pPu;5mrd+h][dGdZ8JkWuX"ZtZrHTG>!b_bf*se`J0&
%n[AgOQ?:)VO(F^JLu2W[H-j&.;G)a+NmY*VNJ%"Y*;<SLCAM>R0\`.%]#*32UCCoZgb,</4=(@r!k2=3K:pg7a[abF%g[JYH.?_a
%3G>!l>mS(Tr?@Eg=5)$"ZE"d=/bZI*TkL^*-RWa>_dbDh\cra`;VY"io.?9*Vle@f/S,X)1DZOJq8af`8/F\`Q.4pA<5&O%W&6ue
%nGPg-aQ`/ggrm=g=>rD:FBE%(\@m&jF1lgHo?Ycc)LfnfYP@MMF[J$5FOZbo']hk1gLQ[dn\@[`YC0R@e@k!H[2>NsIZeKKF?Pq7
%)Mh9$)DLP!9V@E?"&Zru#cP\I</K*GLu,/-_6/Co*TTNY@U@Tbc'tC!GEesGLrM(:(m(ogn+\q,=p>.n4<ZtsTkNdZ_6C>PLu66L
%g+G="je!b3'h9`4g*<F3O?*rSX/YA-<5OmM]Oh4g#fKRC1p?5SBto3Z[#k\5dG!f\NYGoV`YGtg1e-DTb]g(XBG%)?3De6L0'IUT
%:%i7q_*boSN8cgmE\#Y]6ZLIKWIf[CLY#F!eW9)6ZWic&X$(2!,;MLrWg4t4G"8BE*3s<p#2:"`#C$!Ph(t2sfS\2uO0"@PcoSaQ
%FOHH.)#_L;R]WW`0iIfj?FtP%Y"=&gCpeiL-tb`j$#-:j=aVo<dbF#@J*hBQWk'?UQni:8GGA^T&]+6!`jAbkAJTnj!XJ$O5]#>&
%i&:J-\:n%6#;b-E(gk4BJaN-'fn4DH?d3[TQQGNGp7Sfs]fTJ8-Z'F[FW]l[6t%4'9o_M\)^4chQ8,=Gn4*/0qa#$[.&Q&1@0Y!I
%.#l+ug7tO;@8sf_g`=1DMtllKL7^cKD9ne3`],L\%^m%<(P[+`D3RO^(.T",/>7.p*Z;lgE5-c_g=SZc>Z[K!jn@qf2Kc6jZ\WC"
%lgaqdT%BF9qU.[Y!([rg78a)H!Q^8$ErG1g#Y$;260Dir/BkfU6*"UfeVJo!$$:M&J"S!F2;`9Jq4Pt*"UE*()>Rko^,[11=3N'O
%FAi(\YFYHj/&-!A\Ta)i_g\2-@N)JkkGB.`ZuMJ52V9(C\:H9Sg;+fj<9@S!R6Z-U)64ft(HE.1)epFN[E(8nF(32[1q)GsLO1S\
%GgBiGa4`5S;PYSg4]7$P9+a)=nBK?sn)e9lpUGFf2+`58hT=Fk\:rSqfYuT=a=iQ9SmcWO;SQ@kE(94VF-Me\<JsC-?c+>tY>Gm3
%,pV_Hpfg0,-tXmt/QO+HpK"p[5.3Os`a;BcgRZMg'`M$JjC/X4oW7"/cYl&lk?Hf(!TF\T572B,i<#OIRm++@7;D_Op%ZNs&)J0l
%OTR+qcFiWF;7G,UJeVgCZAdh-L^1=kQUMl:,l]-`38!1Vp7LCR(Ipb9.,VC`3p>NE%=SGmDpAQ5G'C!Z)"]l.!UsPG/1,+R`%_]@
%r(0_cNXW?B!O;]%@2#O8JN#Tma_LpX,@+X/:]Uh]pFkE'r?%fYUI:1.lk6Z7Rcar.Ust3s)]3\>C\]D5hC4TB9XWtWac@CUO_XKi
%0s?^+dT3kN,3/a7Pk*Q'OC&"oSV1!\BssAc@9p89Ha/<T#2N5lVC**8;Ee_.)[:6Qg&l\'D=I9t$<PhWcuI]'"/o"<!c4h%VlIs5
%HE!@Rhtr6fG$^AN#%I7/)m:FWE'l/%P&sQ2]P#V60H3-+<,`Q]W7k!h)n1&n@![XY91a`$bH5MXeSHJ-,U[%T=HJB;4$1`uO[D.p
%J-([ElGg;<N5b`_#@2(El`)':_5/+f-GZgD*j*6q-TnU9"(29ofdN[OMSm.)>bc6u'<7&H`#L:ebisf7!NaDZkd8XF@_O#UFRhcC
%_-q/=UEamL.'="WhCkm;L!N#.4e*OYFt^YSYQB7VX]n3s7u9,CDiTOpR(nIABk&Eb38/&9Cnj%4)13Oao(;K58Ib&-_V%cGLS^3i
%iDbc52/^ES;$ohPpun]sO5/N=V@s^bNn01p;IS9//.6rX"c:d1C)Aqe9iOm.,k-P.l;d1M'W"1PM?1rdP85CjZ5>>i$/CA2\J8@q
%SYGl-&!bu,R%u./+kc9iXa[G@XPISS'>4MA&T#.I@)%!&)mONL\fYq^m*D#n;aqA>fhOC[TG0I4RoErK1J>ut$b(e\HL+bM\4&?L
%<-h@R=`l8"'P&O)FB)")3ppY:99coYd5f/P9#L_r.N/2$,/K7LP>gc"Xr?^pF.SY],?%/NJ6_e/5-'Z\Gh#tZJJ(FM#-[IBC8FFD
%qXdCCA_.a",ZmY?Rh^&<g!'YgJ+,aS]4n&dmcu"X^?Rl*$96gMk/)YT0+[(9#5:iqU$f/Si4(^!LV\)LaEWdhJcf.kGLC'app<^B
%*].b5GbJec^`eoc6&HLA=+j]b#]%*JTboO3R*X8snna.&rMXHdj4Wst&$+IJ4--k`[qgcqUZ;%6DJR"9Z[(B:G?DAa[er*dp!W5_
%f'DLGeq;6'fDA@)N+\X!O,o?F>MZSjfV:s^&i#=MRb#c6c!RYg%sPKHVk<<nY;P(Hm2'jH]%PmhhJ5]a_bTq%q5`NC[c*k?W]O#"
%q/lK'F^JLpaueh6c52d)mJ$LKr7=_Ij8JgXVB-H+5^_a,or7VW>K@`oca-toO3aMhr0;GM3O#oH[X2T#H1g-+VNa`g);_EO\+s`^
%qmQ!.GI*jCYNFH&\qT8Eaq]$9pf7(jCG:82l.jS8G&)"TYHg*Xgl;9(`&R>L;8,_]hfcK$4[/$<_4]Pnce"ckq"<iTrh+:N0>$Y"
%I@*$!J'd,+GjAA@d#IpFH*t:d2IA'!DN'LUmECamBJo[-mE=d4md]U0cL3rBqW@:`buVCAh;YX'lJ>P2L3HA!%F8ol++DnEIQjiD
%CJ2tpYI@OsFu.+D8)KDYQ//R[)]cMp[bcDcbr!S(l`3*;>8qbaj%e.52qh>ZVH#f&X1+QDCpKQqCqg"rfoLRY>h:Hpe_GlaP>%![
%QIjadCs>/CEuNmMQZdETgCMU(em&l,T$JL+YT>p7F2@%im5L:@S+Q9f-e@_7`Y+C*e9^ZcVr`PRDS9d-X.EpA=0-NfTPl;KNI6%k
%Pi(u=*u44G^2IF=(-_N;>%&i+NHTUI^gMXpI9P8=^UDJ_??#htg>3Y&)LY*d5_@m.X&#AUXjR'QlQ+C"q9J\7jm1+9Cc90C6[QjV
%;g&7Ffu%b7T;!Kjjdf>gndPdZmq)),N8<F.4>X)5f%4r>PlJ=`^Y3r&D9qep5Km;tY?u-2cX/fZP]"X7bfRcn;5Qa('S25Al.lGd
%WUbN,m?_JAO@ri'A((5L2JUL9V-D:-UqI0,=(cjp`_pL%>?QCN@-a?/'"/5)ls5_'2d,2.@:?Xq\p8./*h>N*ZfIM(Q3B)>A8O1C
%\=\,Y)(/^$]jqkM>\jbYfim4r/f4(9P1:&e:&&4*X7D":>*m(n<iL.);`a8eqmkB9RgSKCm([Dn6WaY;g:)/]e'"cZWTt@d+#R,?
%2qI6j]h<5>8`"BnehmD;B.Fr.k=E[SidU%LO>**W?N3p=-2SmW5PSu?64<9cFj@_O?Y#0]B9*D1X$]B%0.nc/>c%F[C!m%RYb/%#
%46KK$<i<J!55W"b@&IWKcjbrO5L/`T0)<lGX)1fo\otK,*qYN&(U"7^eiN]Qqj4It\n/P@iQ9Y:41NF5gJs02cLh\qFQL?To8'P$
%J+HMXf(A26$JEhlcJeXfg$A<$ctPO'>q/%kmp&iWRBnQ%q2O[bEe-/gp%Z(_.3/TD]5L:H?=D0*obP-l?Iea5L)apqXT^@liK:PD
%(+-c]mZh_*4d%t4Ki7NPRXXnfE=m<ScK!,_XnbB(Hf[Bq<VY4N:N)i#1G@UU24tmWUJ$8uh3.a#3*6#Y+u'c%jAGn+oD!CN,b,VW
%(G#5t(a5Q&)a5f)o<RPY'ELV3NEI=aod=-JpOg/e;L&Kaq<ArcptLS):Nn@\4jBM!m5B"8lDk7)G7RPCq%k]UY8=YAbSBi9;02]3
%_=:/g]1^i2TpE^oq@G5XgNchJ@dLh>gosSG+.\S<c`]/$UO*OGkfUfh3O58-mc(FJ+R*E,o.N%pOgX<+ZOhkFjRJQr.YH\eZ`#$g
%lqR1Tl`<WaiR8h@HItRp@9MGdAp_4!S*TlKHL\_[LFCoUTb/@iq67%R@_I^=in\!tnMYR.iBIe/fO?6gS.de-2@-)_)TqQc+JkT?
%*#:<.KWm&Z>1=!sUR+V5kWunf^IkA3P@nliZBr#h.3mnV`(c8NUZ7;L>]7:_R;g/J)KrHh;A7=5duj6kGVXSW!kRWa%/pn1.r(Rd
%_H7Q9a:=sqqC?>2m!:l7"EY<Ld&2L!Dre:p6*joA?+eeQY<pYAMFRa$5icBF=!TH4Ot3IKb-)g\.pG<&,<HLfLjV=@Y<>Mo\d@'"
%dmIijQHaXncf2ja7IRO[4h]"KM&)a.2mK?1)@8&a7V608/=EVZLaSl7iM%g#.55)6G*B49)8o(>@9c;75[K2)596O/)0+UR]pg^]
%3>"s>%XVTY4LH07Em0"&.0sXqXZ,Jp;!22.@0k[_,BJ0Rr;mta(X4#uOX[thd4">oEXU^i0C<*H>KgYOnQ<B+QF7/;S^N_X/a_WU
%lJA#>c_YJ_J#N,ZMPnf?7]CV\ckn]\VZs6nWY2rV(BU$A=mIg;KI\.!L0OB&qdL_Dh`a/5;*peK<>Ib`2bn=jfmE%#=%<2.ZYtTP
%:%lHMS2SZ!B?iOCotAo8`cCukXg%+D2.b!O\e9^0]SD+MV/Md^>kWhr2T"d[a*7\p.XG`I=qqRdhC?9(c.F*K:\0@D-XR'8O>3AW
%3lnrnIt^(n(u+AQg\piNh\&+]dE7%is-O9`MtH5[@WYkk>RhWT?u*4LqNLq'J+]gi[S]3`!&!s$[iBV3FaF)*k\+[DW!(qTd8D6g
%8/r/Yhe%lVq6/rt\a!73A*^//F:GDA'*;uqqSfm=.fkZJ4`[$FLO3)!'K(RG/R"XI^r(I2-4ZX0YLcjInK)$$:VVD^GPjFEZhc;`
%;16$^.HW/+W`Z3?$dtY"7+!dT1j'j7T!Kkr?M+PjALMTP(G`"LA6@(GkU@>BBH<U*Y@6?$Ka7/#5T-SKlbCLA8X7iCQ]%bZIfGse
%"]>.<e`a_eeD'DlHRg1b@Mg8&Ha;ZbYOYbu=8,!r(\2[EZH&:U$YRj4\6Ol=hL9Q.Cjjujc_$dk.-rh&?g*YWGGGL\Y<C\9i7R/N
%@J86n/l;/Br_b!C]'kq?Y?mg6.HFP[nj+Pm_'@4=m9ZAt`>=lc.$F!m:=/aE3&eC;O7tP6TC-&k8GW+HL1s>raPIu?K&_?$'eS9:
%bfY=YhU7sAd=X,]TP[`p2%=EF94[hp-ng0<iIKd7Fk=K]HDrOVB):'CZT$`"fgEm<h0SVZ5(o:^pYq/SB?p3$?X[hq>'0N34dXCq
%RtR?o0(i*2Y1Nj+C!U\N>rL1".o<Ltc"@R@.(/e%RcJL5lh0;FP#S2gmJb[:pZ-+eo\+Ws4`&]V_T,q&L@]dUeCD73%a:j$$Gk7H
%\KN,28M4M\[=l_*O!Pr>Y@NVrR7I'G_`o*PN0TO`1;65/0!(Sm[L.<O4^EL4maIC!-50nlP]hu-1<pXgDAZ#dDOt$eh0f(+ZG*sH
%o':.+ZV&gI66dk`M'.E9c#5m*^[ZJ_=0hJ'^N&:`rdl\<Mp^qTGD&"?h_EOLdqo!X.@RZ347^h@*d@;O_!]\FhWbd?8hjb:oV"NQ
%%j-1?FuRa^<O]-&?XE2=^+H9XEW+-LI.n9FctLD-fA9ZV=lYB&(T?%CK_(`ibi/H$]\bh(1*=D[:c'49N94K3Np]F9gM^iG&m2k\
%&,.]``i&`7.?=ep]sZdsRk]+C+83i)[?Vdd8n9`]QYo+$](bUc`lg</;K3N)UV#AIr9`V%f"0V\S=FJEg8oaHY$fi,TA\KQ?4XM@
%3u];$`@'TPI!f50fXfc"m?Km6<em*W^:4",=kSiWi-]Z'c=QT.9qK+&'/5eco[?DC^TA<<"*^U))7_:>d&;rNjPlh>Y%MNmm0\O/
%p:^-@oD%/0<mrAn`!JOa2h5X)YC\,hYo(VqV/lC6+6EHI??>!g0'%EG2H.bF,[5=23#Z*"<o)RoIT9mAVCJ'!=^nu^46<pn@.E<=
%18gu)DuBb.TUi.O*49uL$VR)ab^-mnH^T6P/9Dg_BlEA*CAC6rTR;'K29op6DtZC[\-L#AHW=03Hrb?]Ik5\pK.J?)%H@)ug3W9C
%F-XLhnB%mnS*:nP8_#1c;qrD3eunoNAadP1b/:%`'_:Y)bDl8@\6I8!k*-oM4=aZ!G]X-(Y(#1'r3]I8C!1skmW\@WZVQm\S'@^.
%rBmG]H?:ee1=$HIG)IQD-"Ndl<O2Pga!"@Or';Kmq#nFlmK$o)$i.2n)5\;IGhq,u?7BBrVq8*A-!LU0ZeA4iZjRqp;Ch'm[8Q4s
%6(Cu%oB^XEqe6_QM6aODp1Q]1IeNJTk:g\a]Dqa'c:?o7,$K^#(MdSBrK25DHghZbPJ'4eJC\Ugp@/\-Ud2/`5Ca%!]c4Aa8Xt,\
%$S1[@3ggfQ84DcckJbV:^/B1,@QPVb[Ui;3a1'Z_2WcJLpi9jo9/bT&i9GOZAahR,jW<"DQVXVSDXgA8]9'!Lm^!mJO3jO*i.g1P
%bM:+Xr/2BG)r-4DYKk],HfSqPYaIMb05's*)%8fF_qHPMSn>+$VO9[<C.iuTW-5HJh"c&LMD^rSEH!!5>s0]PH`_YcY-=sL/n!ZX
%Q\Bc^ed04)YONp*_@"`+^j:Cj..-:qQ</;2C7";5Er0WrWFlT7n6rB%Hr//!2]lBj.-+0ac3d3="8'gJJ%_mqh]'t;']'H"MYo*8
%&X]iL*oo*Gn+5B&p%6DbD@l-]4sl[^!nNt"^XsU_ArPj<lb2ERjX8P,UmGFlHgNtc"B`M+mtQ%-<m9!WX4"dAaQ(/F#1bF__9MK`
%27+:0A=<(F6/flg&E`@EYT3k:0:MX\p-7sum=0.ABPtEhEi3%7"<t)IOSL8?X-<A+f'ZC!I=/B'#k(]-/LW_a=gPn*16s'2fWDDA
%b:VU'^Cg?ff&:D0<]*tKN#&kQmRM8G^SIj+]NMcp/AKh]eX:"nqs*2DHr/"V>rJm25Y8*Tf@g"KkH!T-m65H;$^YL:Dces]qR1$T
%]fJ@!S982fIKO)gnd"i&)sg\8%R[=#KeGqhmVoAfG]Of;?+H_&n\O-DQ]?g\"rl[;bM`3m(qe:lo1s_iQ\51gqW]<EAquPHpa"0l
%^4kgS.Wk_SXXOX^O&e(k<u3QQc_#ReGPpB1BV_%OrRuSq[d^6MoWq"G$_\+7j@\X];!Q46W71BF/c55,a_q*Nnu@m<>[B&@Id-sk
%H-4XL3qJa43fad=afZ.oHZajG>9)_Z$4jW=TRtV$Q?i/a!c2JZ:/p>&f^3>W+830jQA)+=gm2tpoB#/YDW/cO>";05_nGm?W^,tH
%=iD<;MW^L3dV_:"Xa%IJ^O"CW@!,dtFp]%noL?K_lK>QjR$%(UHh6jo)=AoTp<JZ3da5g%0YEA7pi55To+r>`B><9=3WsEo%_T9_
%m?P0To.LS<IEVNBTC5:6`Zp'g#+4eY->8R')qO05nY;n`j1?p3?dG>\/ioWU$bMJu;LD!\@d?H2)]:T)J@46>^N#pa[Jg'u:?gfq
%ALV\l^G[06HSem(`2*A>%6%?k@TrKXFC=bDDIqsJ5&>^!A57<;Rn)j`&C2\,ei2T[k0#dR2ZKSa;7<t,4b)r!e\PRZdUXb=YkHBM
%BWJe)Z_"ml=d+92_)Tn=hV4k[cSl4,DME"H^&g7SnTqpra;fb"/ZiQ%\$jnBgX=R32(6)CDQ+6`K5f'`)LZ`mCT\AUc=X8cRD2d%
%Va)Xn&=aO&H_!/+MI3H_hc=XF^`(mrICrk@>PjYu#Og)ePgX.@!c._=MG/BnmE&f9nu[BKbO4WdrHB(&02,f/b@h1U_[-sD`>qe<
%l\,REldbT>i"/$RL&L"8QAm=eWR=kk*L*R@lh*h\".&<>[DEPZL?SKal!")UhNatd^lb,)HLpMR_^n2aWG$5D1`dj9U_Ora^M`,9
%JkrEud53QI/Mqt._5qZk^RK+icFeD:i^=u@,mBA(b2)reS`AmZajnuQ[gEpeD`2sA#obA]"[/_FhU%VEohFC"m\)_I6&,n+Xo1r_
%XhB93,KKUUeTVO5>MkPmfKAf_*(;E7"l$5r2a/]RhHq`pYD7*26r<%We+po3#H$3tXn-M8I(<9dAI7PlR/kk-5Jl*g5Y#]RQ6ZE?
%mr!P[mq,0PqZ7tj$3]?-lWtpZpk<C']G5iTZaIF<l#kQp*0a"ne+G)GH%E<UmY5Ne<6%Q6(1MD*BT@A;H\Fue`F`*7PeQn5I:HE8
%eSD4mrpDr*]=4Bf\7npTL[Oh\$O6JJDZJ(G>kQs/a1-"fT9R+P[>4&WB(F2n\L.MHLAH<(#$t[)A%Hf>kjl;BI\cKf\4dpL1Ht2*
%SpcNIT2;k"p%mefRSrOa*1`DT"cR[\8\jkBcgRl.`4ek!?])AdBD?K=SkkJ%iQ'0Ir:*SEKBTD8r6ISuMZ9HVcebkc%q=hj?S,h5
%[!;E0+3S1@<G\n&_G%!dkgNLUp"X.oq;O&u>ca_\UU1CoIN@8O7g<9Qbf170A9\gJRq`nG3K1_'UgO&qLR-*@+)cZ,q+$eMT;45:
%KH0$MmPR]p.":HQfYk/e48,+[)N=6olSqj&iJ1oXXqUdN^Mp@_k!6OCnSa3PlRTc"Ukk<t8q$K1V(-u36h&$96VCXDD$(_7Ml&)D
%Zr6Q6R(uML[+lA'm53@8$XcpidKYY_\5(atWNLco5Q]KaVPC,HVOc:Cb>ash5[h_&D?tA*,H^9$.Vd1]?]O*V9!9BDhMd1*66dsj
%CP0]^G9JI3[bq>X(&[4c5Q;S7E5hsrdn!efF*"NcX#A`3k2o7c5O3Qr:8W$5?3rM,',J??-]=a0BEsMHhA5[^lf!h\I7K]8\2jI(
%r/YT>FN:<=it6%XY!sFBNB-KfS<#$OhT5hF7o,U,+TkTfQ!9YG,0$ckFbjVer6c25^PrT/nL<=sH?S=+Ocs+pX+t>#Pue]ch=Jd1
%Y>M:pXn^N/@lV0uM^p8EG6o`DP>DLK:Kf-#Xm94h&_f';M1Gje%6+-7Wf!6Gg30HHl\"J:f=#L#F$qt8[dI6I\;"BSD.p.]'JRpK
%>,O8_GE`08C_DMcZtYp4>Ds`XFU5>bbGH&1io`pAI7=+E[L3U'=D3(M[K7q6_q,W:%A?Oc:fuupPaX5-86b=H"c:X2(*tdUHE@E'
%W/S<E\1rf3>f$Bfjh.+oAEW?+Ka')Ra2=0o$`D1^+bIar2E/aNV5Rer0#m">Gcbn$Gk8J=eaQeUEW)NB6piWiNhj`4F[Z<[aFdL>
%SV@nd&tUuedFD7RpVNn2WHR#.J+$'*X=keq?iPr<jR+j=s-+l/mPN<f[9GPfG/kKo<a<0S7bTUlHO+Z\A_@0J<5Sd+*>Z='2_9Bj
%9AN@AQ$,EP%RF-T9+j#l^A@.(!P#9nkU;3?XfL,UR_%!7>u"Z=#^&iVN#KqEG=^obLBLOW:[=lF(sGZPU6@Q1:HK%p\m,DkU9dS@
%W3m[#$AF,77Ql;peTI4Ue3QZ.3@)F;_9f1lF%$M(W*gWn-;#:_m3r6LK/-T1$<WHflN%B.eXe$f#4Zi0dq;(H-dtZ%7].W_[JsR2
%-_kB23h:f99WUW3h)$8NdYHf<?)+1_Z!DeALgq@ZK"0(VL7+5S;!:]d/3D6IV.c[(XZ9)TJBLM@K>keJBL61.cm%*8/iAImVCjj6
%L1gR37'.:3=97rjREFLC&X\0jMf*F;#7Oq@Am-Xk,N>Rp8jFao6^"*II/FU^jLX3R=MPt8!9'5U=LQp\$mruIXX[^M5qrib[&P-<
%Q42beNp1YKb/\`7_]YgF\L"Y7ACj_qa9H+CI!!.96L6Z_)R0WM7]_2Yn4Bk/W#lspV[Zsi3nj_c_cd@YX9Hqm[,MNs&GH`.U2Eqd
%+p0;sOb"?O&?>FK)57U4_K#`=>%IP[o(pZs?DFH7WOJ-Ws0,DE/#g#@Z!:Q5hoE813e\]?@b(cDi`[8lNIWA#A`F;pi#"^aBC^G6
%"9P.8*JC(Z3ACea&K5k#6D.r=ZtAPRBNBX;,Tn3E[]^P[Sq>Vd@Ao9.Crd6Hd4tk/CKQSu7HYA<fMT8:_:Vj@hI[$'a'J!3$NcTR
%68f83ikc@t"]*2tLE#>^m0P*,lX+s)M>R)PSe1NObZ>YD$)(MLLPCb-=,;Ar*>&Y9h&"L)ldu>)op*`;![Tl@^(;Ggg3"F=Gce>i
%4"O`Q=_WMW\dC#Em;<KY<hZAsNeYpJ"<p.`;*gM)_'--d&QAjT%0<A\/ZMX9efB91SS3bK2I,0M1n"u?M[_fP(V-!d^`oge6LD/?
%R^%<N0JObf2$/QN0?1hk:o1(O++s?fpd#65-3V?<E>c5/18'<!:iN[q`USmDVJ-c11tWA<%TNNrSF)\5.V^'-&M\A`V,"5pja*^g
%J/Rk[#\?T[&<,b1>+2Ga'8&_PYCP06O+B<R8k1$Pe7k5Qgd"Vpp4%OJgS7]/:<R&MgS+,T@#h<`6)1t;A!#`H60-gc%^ak2JI$>5
%[d-[\-fBck-K>WHUtdPQY1(nZ'BXmnBE:skd=BE/.hF<)+5W^;kGIdmY&*](#9Va>&A\DaJiX;E5>>hU4/-IF_P#8CA!r^0U(@>B
%I.%QVL[MBH"PY7rd=D7[#0.@.&]_hP)WGlYh958s%gROm:r0s"(bcPL;]L<2>*WToTEHESE!.Y0$;`=A?Ghc9Nig0]VhQ^!JQ%eM
%->8G($5gtmmLMSS3jAgH+ICak",Nbr![etgWPaZm_b.i;2[!25#:>f&bY@/?U'h3b`[Co)Jl<<+@%%\%;O;q[4lCXu\0o,L``Euo
%[k9PXB.uN\TeU83&DG(\NaTrHQ(m<9%J0aBkQEiif['qD>U-b<U4N!1/@m#85o>OcBE/nD'4GRAr'TodHA%^G]#nGgY>8RgVTF"M
%fP5F,KU,QcR5>L6FRB[o2I[R+%.d4lW3]`u47G5u0Ra3^FKRf(/oBG+Y63OuQsb.]o:T#J'0qa$AqI,L#d\JnFTF:,Wn?VK=2HN"
%!Y"3(oEQ]SH*T+l-"mf?QGGtVKBtjo@Y%b.#HD2dbm-jKq:If%F4&Zqf,[u@L8KmueMP7jR00Wc0Q'p"mg][3'0-M5)GtL[*5^'Q
%1rH"\pFn!CM1H+/kEt7G($:riF\*Fa%KcnqQEO4d6)Ytm)Q8H4*H5=_\Fcb3bP9Y]%TfP.esUV7W5R0h3>*"W+Ke5N&Bb8\^m$[p
%KWW?0'dg9uY>ZGTb(SeXBgC]-B`h=;fY%YdJe]86g(7jPfsVbO)<JYN=I+?p%p5nF<`5TaCkEk);US9'jgaA'PGp3j2[Fsc$67AG
%_nscS!ea](.'fj>`V"bN(C63C'kQ%[<=5[cM*M5=_$EA,<]P[a,Aj]e"i,rY13j$Z"."eY%]e.BM@rPrFOh*fLC%EQJ`-YGRnQOT
%;e,BUCL6&#Hjn8.<O5^L&2\B<@)b_"ap/]AJ2qFG4/*Zj;OhZ)W\.*J\G8]uGm:onMm;$X%LW+m-0ZP_;PcVuW<n:le7,Y$Yt9^@
%Sd+Y=\f)J-2B7O!:"3cdSrf*5TYl]S7)FZ.^^uk"%M(=I4DoT?k9$k6\??P[.p[m:UV8F:'eK`ieVu,*=CWWD3H1:L%(W=Dd>!9'
%_<N3U;N!]Bi.#FiWTcB-X+hf%,i6)E#c8Z=!=Mb0`YN1bM2A6`8NJ8<n8VQZ#G@`K,nq?''Uj>PUiufl>+/TDf*JW$>Dg1jLFqf$
%'a#SrEn*q;,165WAsV'1M':BXpoY!'j3!l/-N@3$Ni%FsK/jWBgN"PRjT.Zsk,VMfF_]XSD6O=H6"TIA=LQtB#\'`aKR3_pG6k#h
%Iqm]C?^mnj#e9.fK#!m2lY<34A?`WeeEr4"i$%'BA9.`JSf,Bn'ejShqgg@NcG:(]*@8X3hRX'47#oI<W%K3#:`4q>P(59GGYqsM
%+;"2^K2>K3Yh"f>$5hH\V26!S,InErU.pB>]8e(L#U(*`+S[.jPd[G>5U7<P"T5JFJOCp)c`07)JT/"nc;5VqA/JL25b\A?g0omf
%ONamPVV2?.$qKau8G$ZUKt'A\a2YK,O$KEGL07@W&jZ_YaVhZLNp60A,_K"$(X[D9P5C7a&iY--U7!qC(INaAOJR^f.KkpF(n)`S
%;M7Oee$Cc[7$qCCEIj&N0nMfD/uK_T/4+GOMB:^oj>[\q3<fef*Mj8ii/.nuDWpZ1#`/&m+AA7\#j?,Y&7#X3WGssbqn':Q+$Df@
%=GDJg]#,XO#pDDYO$MuD$?-9hYkqd\fK]H]__?1PBO&,W%DW=UH__US-Age!U`2Ug&IL*^%/M"6h]D#O-l@),\j9qFMl;'6Ct#.L
%[Tt`O7U3=:#GP*+6cfP*Aqg't"WKR'du&u45W$_^+jbk$Sem6W@=T5Zr\k6[2kkL^VEo>c_C,_Q#)MZ"67sN%S2]8hnpoF""q."+
%<rjpCN.an/%*m4B\MIZ7aTnXoVA9n(hh"*^cE%2d%,FGT^h(uK!"B&9)AT;<!&u3/9,B:(bqO*G;o4t(*t&'rCP;@,<"!Sq8@=-D
%/1q_B:cLLCO/QiN"I^)@5gtEU%hMg@Ap!5jeUUtgUHk2S_E)dMCV%]1(D%]#`_.,#>H1==jjK#p(,cF0#hT:`R=P^`cm=@KDXa[9
%a2UF?GLLYF1T633@e#RiDiP)i@,X2US.T"p733'Sh2"i5M\@[8R1k6mq3H*;Zo"WL=[A_@W7+)\Kf;\:?4asiSh`$6CZ+<GM4rj"
%&sL<_#(Zu`P_h\^D-4q;TTp`+NDBt:&5Y14q()"E"^`:m`1S'CEA]-k"sJ`e.MG0(89Usn0aMfU)hKIR5;MOM-O(^udGkmm/eg$2
%cbr)eL*c9XM:"&dTpd_k#iSfa:':?6`6dNX_nm`pSJWA'3h.BK0aQb3?C;Z&8i9Q9R2DK+19L>i+HU9"^\A7TKLk-SreeuDTG8`*
%16pDY,kK5bZi^W%&7qMEY3Y;PisuEo*/&"`)JJo`!&ch3a98p3T[1p_X7JAV9^qQ(QmJ\-j4&?LOV$>K_/)=G>ZcdC.RGgti?V?`
%R.dgNA&Meh@>W9Rq'=U(&[ruCq')bs>8*A<Q2S3(7r)36+,qZOQ.=iK:b;<Lq._J?$DA;hS$oBiTg6Ou7&\C]dC<t3W1Yj0,3$N`
%?7pCEB42VI5H_9iYNiClb8T,GI7:c0Co>.;</iJIF^V@u5&+mg6"?VgLg"/09TuAj8FMBhf4OjYn-:`L\dNhL-*Y2UBH"'=+lN82
%/43@O9NA]lp3'Fi_DIhHY[!_(?Rgk>b"Sa`$-)!9[Ukr69aSes_R3<>2e[1_ga*?K,9^W0kRtm7201nq6u%6nNB:uSq^P,FK^!pl
%NCI4>!H\+3:*MS)i8[/uc[tR43ZVC>s/U9likGDgmSDWa0@9ZSqbhN#_7K<e2'AU\a8H.ar,i`&GLQKnMp]aW`bd2Is1aQp#\MYd
%Xf1!#%#CeofuBVAGp(mH",has/kZU.?A9$"U$8F'k'eL2XS"Dm7r9aX71*<(ZBK2Dq1jr\/+4B1+Ji!C.eCnM0t7clTh@;q8*[if
%dW9Q.eSu%hnKbr5<j>.Sp-e3P]Uf5-".&%J*G>TucntM9dP]AXpk.:R/LI#*-G^<2,)]cL8hfVM,`f!'^<BtB:fDL2l>`JT<@9EB
%e2nFgplSD-KO="*'-ORUD@jjJ+_$^jY/cuh5g`2&J@L/_HgG0NYR4*6Rqf,><9F!30t[cH,!r`h9.O@^^^o$$DDAnj@)g)q5>;U]
%'@AUIm*`*HJq>)f9;Fpn;POGLeN2G:<;a$5>`=:mbdn[dmOW*`#Ztg%hmdM.NUL2U>.L]cVBtoh`jS+YD7e8$2"=e&h)9:$\*ZpX
%e&IdO+YMLi$+X7ns,>(\:46gUO:qLe^!P+=J2X'<_BZ:0[#2G:iLp^h*3YWj$`k-K(Ph!F,<BY,bKP\nasT'k`%i&YPn]@lV<M*X
%JmP#X2MR"Re/#Z-XP/Za4eX=0YjRAbiCIoB%Yas#.q4D+2?lO6-75Aq'*kcuTFUE+`@f[!e>Yg%)!Jm`4$@>V_'^MC:)R4rk*6Q#
%R(u@CbULh:L?Bl^D64]4P+Xm!/&ui$7,HA/NFF*=R]0_pJr(p??34j$mZ#2d2b_A##1$Eg)o2LWa.<R8Ab/W8_o6J:=^%n*^5Yq(
%c*Tq>.Pd-OVQsV7`CbDQp+Jq/UZ4qJfLW8(=qd?.d)9h"!Jd.ik3URtK^seiK$VYKQA]l5i,]hO7$"5g/^WM^J(jthCt\_+K8$3*
%+SZ.\G"d?W&;+OFnGtBcgeHlVd#9g$'*9dH5Cb+9nT_F>4q/ILU)(V(-'bWANi6aZYsDPMm5i,P87DeI,nCg]I#Ss\)Zk[6XS/=4
%_7&dM^oR[fFq"c,@G)dI?kGVU)7Ep&Sl%??_$pMd&9T+S=*lY59FhA*@LJQ@&RH!$je%jY4""-3c&^(V%bS"]"IV;O8*F'$a&+RX
%6*MSa;-n-k"BuctQR05"%$@G..6@k<W4L0AZrdnQc4pA<cI:*aI"Mu/cEs9Zo#)!fnId+7Bp2Z%J=3jCMlGio;dcmZSt0Fk9eiUf
%__bde+M"dHK,6O^]&)2LKk27:;V/d#-I#r)C:aPt8`MO'S:!uRKh]utbYmRLk_<Z%a(elG).AaGj^NWjDP,tD-A8@MCSiUs.kDmJ
%k$SV;l^;]SQ77JS:'<Z)_o]nY_nl[K2ER<V-eK#dT1k4!/I=?*KE]3uV,je<oa7U;9SjT5(/25i#7qXATH@d'MW%,\0m(&3:7abu
%fd1M?eqRp[;-K"*'5Se'(3S`$+kK.^:^C#A+QI)\&.KDc4D&3amR12k,IuBAb\/,P9+tt_$Z?VC$$2pg@M+\MK4DKSE,'M<guUgY
%(:e.^e?D!=$sBD3o1rj*UG=`aP^M4rF3T`I=E9q#m7<Xc>bO$[]E9\@/@6(n>Tnj>cSaoc*![h#f>X`-NcZF0i,ZH(-I?kP,@*?M
%H1@FfIA*q`Q(5f(>?Ej[4FgjL]bLi$'@/G-9\<=g&/Ml>icTr#<YNMrP;E=HZFFf#CsGiM[_Yn1Y\7<^TEKBl('T7m_)a1e(R]a:
%ikia]BQ:F0es0toZ*;H.C"qWTm,H*=@(gQ>]UJC5mmL'8G2,bnGHo<E&Q'!Y]l5;b-o7h`*fr&i.#PXqn7ii1Q^gMf+:!*?>codq
%0OEsT>HZK4+W/B\nZ[;k&#_>%Mh.W8751E+TECp?Mk]QtlT><&E\lAu&4b7nn4F@`T*ch0Hm&UO8KlUUG\Mh"q:S@O.9Lu!ns390
%CIV*$&HdBq=Rfk=`_3S$OjA2ACCDQB_G4]3@*-?]$4b`0FVITnJ2tlr)Q&!+#Rg@I".ppCWB)sdVQJT&R(:ULGp<`VUVhKl;6GfB
%fJ\HC_'=)_+i/nFEYl^#jO%+^?4Bg\QJa9"Q/V9X=>62P\6&d.a2#PZ-6)lK#m8M8YX2iqRs2bXL;A#6,$bJ_KYXARTeS7Mq>Am(
%#!X\<GN5o@&ll.kM%Q+TQs!*Yac9VLSrl#Ad1R.d>UXGWJI5h,1feoKU$QG7-+_Mr"H"d)'s&t1(g,-&ob6j?)GpWI"3!Vc`9uS4
%*[S0^c"kr56$H,+5ml%rQ_p]8Z$a^loam(-CQlLS2T]PN#Gq&F?nq(<@)bD&7?*lScuO*Y6cTe^$=bc$XX[_$XbL68FnhMn;+F_T
%:[nRl3hZV>MsF^N(&HNj<]>]+(LaXsGJ[*!:gF#M?rd6,?pSGT:W/=H$Ag_\e%ZJbR>'3caaZZf2>@sDZg%mbN>J[i+/*DO/XNS6
%AI'O+hAN9,.+]B+6QDf45ni_iQ]Am>%]BG1kGQiJf[;"l&[fRdbcg\NU4Z[GkjT4O`X([@^/oFGaG3M1g.S@HiN#FWU4Y/K%#JU`
%)M:KL*!6SrO#8AONnSiea=og)FZfp]E\J7$bKPJS&QG:;a--g37YJg-S5>R<bdB7T]&lPS%=3nd-XNe282,%nU#^pPWlje>%c$gf
%\^j8q0`O0s9CO?NS3senV<OYlprtat)M3[:)eMc*iPB3^-+Z,R0pn\i<3T=hC6MPPW4a]r80+b*L'X&^HIN"fP1/Er'SEBr;#uGe
%<,"*e\,Dg83C@(tji/r5Xb`qcLl(neTTaOQ7]^[8WO$D6#VL-TBMb&Q'h5F)R)b$fk%9E7[O=(d/8J_\]F?u5,nul+Vk`Hp-q+A?
%jG]>N%07uS'4*^mQUK*_Cq%r\<6=k[=>WOTnDGJmF+qa)NaR!S`9;o[dH%*@j^<[KQlbh@&LJ$5j^8D,!*_Q%JRB9)"sQa=I(,C^
%WQ14f!7Q0VJA!RE+tV61m'e^iLEPg"&hqeQJRY!W33m>bLgsPcPc5TsWaU^7@Pp\uMMWc&BL0OQ?k*;+a*Z5TmY5L8Sn5-;EXW"c
%3M@?t)'S/KSB2I0)W7nX%[K4s7NojgGXW>[!R&H96pQ[cWMJNI;q(dgET$S?i5pJm@e@I'N90j#&fd+4(g'ISe5IV*I57WG3D;OX
%_V2g%8hP#J`^:@>MfBl241@m,K=HKQO1hT%-:A>fAag0;+[_Wl2%0Mn2'Hs5N\*9+R]`_-ES22QS#nIVajK+q)Ep(eKWV1X5>e1C
%iD;2hJ!G&[FFHHa11BhsY`0u(RSu^_s+^hlq&q4=@HHJPDCO3?SJ>Eb$\g@J0G[-60Jm)E"tCOAZ4nelUFF^^;N!5+a-]AaO5cnG
%A#M(nUMZN:4-#1KMlR!j'6TPO3%j;F%c3%.1frO+i<mPU$VkG@9MFa,l,P$S2TlH%S-YJ5"QPJjVl_,5NXB8QR;"*I+f:7l?uhd?
%J^U^:#[RQ#](2;N&.G!4_`>^_bMX0d_G&rp^W7"F1B]'-1R#@/6RYPe'qS51m"g:uG.8,<%&tl<!M\"P&sO24S"REmg'%%C\U,9u
%InWO(2_T27&Vl&e5m8bO)M:qW>tBS3g^p?f1UNMlQ=o`ll<^rqF%M&"8D0QY</NY[U>1"O<FM9V"W=]fmTU?(J=*jaM`(86$57DA
%MT-uB!Gcp0hI\,<%E"M.7Dl0S@NmF46H!/LiF.CSU#SM93906\-FB3YV1qH5Us/@FI#.(!,2E@FQ.ASa=_N@t8[];lg!U+kVoo[0
%4%[XL(<.>T+*!$e%kL`_^^N>F+kDul)fjJ,>mmRPeL[[Q1"V,8Jfm2&:0FBgVo@14GZN*&RhlnA&>:(;%-hZC2I13[_.oAh?`U>(
%!Fq=E#I9m[-I+'49!lmRfG.5!Be!NGJ&Rrt]K)JM`Sf/IX_4lPFag>"f;<*m^,Bi`T+aJVMR/o>C5[^MjgJ%/Ng4'/fb$QO@gF([
%aiuXGW3"knPcl[8PAgs@=N%3OAjI">?R%@cgE[]Pc6b<a.M-e(FJhnJ`PL%M6j9?M4,tJdONqbq;IH#(-5825kn(Qu>`fBr(hGuZ
%*m,/*&E/nHiRSL?.uTm>=SFk40;efr%T.MB0<9P6(G<hKCge?])i(E@&qMpK@An6]&a;0crJM+WPuIco1caOq["<%tr=o?Rfqili
%_MZ\AlFJKG)0J:?d[$g!EAPj[V874m$O&W?/0\M10D2h-&hp$%$q&WVW46cC>I*6#e/O7\@`BH)X=HDI$TB&1IX9^jV#Pr]BJVCQ
%H*+4U_B;BI6k@<jne$9_=]G,BqTWH>K,nEh._+A.8oPDulrWsk%UR3%K*NrM_h:Ro#HT.W#V2Vq@X@Md1L\mBY[,Zg,-KS&*1f0V
%BXk`#oQf)VL&6*om8qfpL1%YoKo-7!W).u4Bf`>&h<&UfKSbk#]\+EfWXoe$fM=<\P#n8P9Z6150/miM@hl2i%<e#+@Dqpa@6GTe
%:a;Q"9h*(EhKsJKZGu/e,+_W4pI0_/n3k->GS6]"jFe!9;dPJG>"T%04lY1Y23r,V"c=8G]""^P9nCTY=(!Ll$5b13pcpBm%qk;A
%>"4d\![\aO9\59!g:./3Xe9O(kCG=lm][hM("*^\?!cX.)RT;-7S$2peZ*%U#6qMJlBF(.NuBu-1aXjM[A'5r'k<+&`cKjga\Y\]
%Jm#bQUM"6Q-DXA&7Qa)XRr3)r,^%<j8F>3Nr3Kq"0'`%&b4T[@:-[_&mVI9%\p2%VO0D0Z.KUH4i.Yu%R&V,?0]&TL%KK%>!O'p\
%[1''='!NEsM,5F:@@'\l0lb%1\86FG+G*epfVTiE&N0N?&!7YPN[2R)77(M,<p(9HW$%?U$5e1iN-c:Z6&3:498`fC#YTsj#mRhn
%f42a,C=eTP!8)6b4XM`m1&YYGro9LNhIU>f;I)A/QO#YYL.?.k)2tjQ(-Djq`>(AB"B`p.MfFbhW\ATKb=-hgX'iU*`"CZbMAK[)
%X#X>M,(CV='5k#k=Q:i>JsV.pF'U=02l$S]qA6eJ6Pmj5!CP`In&(:-;LjZg@$i'>"/.WIJo,sN^&l;oM51k].uZ%aMO'J.`InsI
%P\8lce3mJ4A?4A!1s:]k)#*N(D;gIH!gW<a,<<uQd=8r'dR0WB3p.AQQr6)iUJUU8ML8#jh2ussm_WF/ne+'Q*PneY*9*tPZ0+Ao
%1PUea$e,Fe8hm6=_D%LFQQrM<>_J-RG;gL#`aZq7L\nib:J>bb<ufGu#uD<T+gM8PJjr]6APHY!1/KZ0]FRbgi<Ss2NUT4_@#S(;
%lZc!h/Mep40gI2>D+B;F\Ni08&]`Djp(hB&2*<"9(RaQk0&6jO\h9n[GNJLnE0P5TcN5a,e;+INVMIdAj%)jr+4%g1I<$U-ap9s(
%$q&`A#:o*O#*G`%TC-B%^JGGh".%5E]9'g)c&mI38OVMWJ5&b%?tqH0P#XsXOChVm5$40/07XtV(#B;gJR==o:rh,i)lY/[BXtVZ
%LbRR?ALEr9Wq"([7sDf^!>eV5%76n"(<T9I<!$)9X.8?+,#"@K'#HK$$Xr&C4/@qp<6FWQZ@o,`n-V..\O+O1"sA]c8.=B,q/%g*
%h'[jGRn?h^75/_6GLhZ8M4as.aXL4Q$!=Bk'4@No$unX3e,fdlL$$;\@e<r*=Boo^Oc>9@@196J2HNFX:T2QQ.Q/U`b4Xt"%V8A/
%Q>ta5lRqUQ95EbLg#X&EEENu0*pdB6!e.&e,VmI'=l$T>A[!p3&j&8k6\Un$m*DF^FWGr)),)D*#\ufHNCG=;3e*]6U/%!<@QT6O
%TfG^r^H%UViNTgmaL`n(cGrBpFp0VuY[*Z^,W6;T]Pg-'TtIG:<k&8A\LV6#EIq;D3`4<0I'jji,&Od-iikr\bMitF"&))W.l_c_
%a:0C.DeI'YA.qo08b(l3C)Wg'*nS7SQLRmR.qTODEl9f@C)Rd?I^"l0^2klP,,eACdL7^h-taajAmg'jRZ8gDkul_b9bZs<M7a>K
%nAqXDLT)%S!Md26IC!)f,GnlG1pQ>Zif%V-@W98np.T]T[;+XO*SHG7U/WM!5uckWKe(@P&r@_;<fJMr%)rtbUsc*,>F/\JM_3X,
%0h[m<@IgJcA=a]`C>J)kFPDpcPO5(&qQd)21ch$ZOKckoW@D<3?of15.[;H/(FtmcB(APrQF>DPd!9Zn35nW)X)?9Y)%'3XTlHGL
%:(^T<.95eJMXAs@o2.nYan+J&G]F0B7)bsh-?FYh>=b[o2!PG<Am\3QM)cAZN'rF,b9_i@[-_f_R?snI%MIN:Qr2Jqb)/K<VA%Qi
%$Qrr?fGhV"VXDGh4^Me-2V;%eo:i'oN@""q't5juQK);M'*`Ug>)Yi=MrZ)L(O*eB0HL6;0ecNA`0>G+SMt+6PM8F2OSB!>:p1/6
%_SA6'\.T&XJ>9dof.'BeM%sp%HfhUQ=kCXdPJnhCiu^p%Xr'Vo1!`,#KG/6kRN"c9$P4m-!V$naf7UXIKZAeBF4[0"ro;76G#c5W
%a1u)S=&uA0MJbO,X&L9!iQ+nRs+VD4DHW)48IMd61"eG*6tYs_Ma^&OXN>as0u>I4)ta@KNAgYH2V)Z"oKa<o?p<"pJad7K*eR.g
%92($Vjp'bg:BTf58%MkI!(Z2@'XUJuN`0bu1*p#Ok##s8i_4n?e5TkN.[3Ku=/+]FoKpscB.EC_c3T(ae^=V,&X;4uSHc,C-'>b=
%?)dFuV<&IH;04,-Ag5`\7"X.E8I_=RT#B,<Dk]7QiXO$[!VdG?J?fQb>pE$=]&H1p=1IUM*M+t%]<;C*`MgjHp5u):(ST-bi`P+t
%cSb_#gCP$:Cp6:Y:U`#i;ddb<X'iAQLSfU].3M!cj9*KKW<*`m9GdmU0W)Kc6@dau8+^cLen.gU_UOj$aT,W/6<Ie42Q;VJiR$M`
%X&/<q5Y5_]Fbr`<q%b_Zps,fFMt'4:j0#,mL!pUr"[[h;8QTr#Z,M7$^Yf[TGnhJ;EIe8QN0>Z[@jb#NQm._D=C[sHYuni9-L[M6
%e*J-AT(Tm,AU^Dd.uFNt<0STcB&NWZD@@.^M@l5MfNL2F4;WA_)CMGTnsI?D6c7n-Rt(5P1OO@FNeUr3F'"5(eo/->ONNmqN.E8r
%*+1AH0R%EodCRu_"AGaB?&%2Z.NZbG3Bf8De;V4CcDY-PcNT)We\W8c*iGp.o[*uifC;XC\>)9uq2^RSkm%#g$]YTR=OAe>.<,V3
%G"2_fnEOIak&hr6h.A44Fkk-Z]M/fh$"'5V:'F<b*cBSU^j,b^IA*Sa'QMnM(IPK.=?/9g$*>?b9A2b:R"9B2\?sL_5;<uoP04f(
%^lj4O%p72Yp*=o=J>_MJjbGX2q;Hi$+nB/lc.7Zkms=LU-<m\]E?\a6B=I-9M8-c]T9#B)]-QkR4W*U\qI_bHj4S#H[lMeFf_c@:
%N144L0MV\QfHC)Q2YK9\K:>`NN#6?2l9/N+7:I>E_YP*USR^[P#4-D+Qk\T25n\p0P[06o';#jdVYkb0<+)GEp::=F$=o$$a&8AE
%;tFCEA%`7P=aWM,%Q$RR#R['fVu>L%m('\5d7#ERa(Su\9o)o+4SB]3Th+]8&93!$=e3u&&>RS-rdn?EKa>l*RG'bPTsH;#XT7m$
%SWjAH-@Q49f!Yopd`WXU"cAqNUNT7D%52J3SJS\<#qPUY:MeXAUH7A#a.a=aR*rGNQD7EJPdL)3X@*H$VrH>C@gU-66<==8@H)&\
%-@SV)[ULA%?kF)k(J2SL_eNa54t7$loC&Y>6qi;&2#1tk8o"c%m8X1Bj&=Y>aloW^(*j:r!e-9ga%B@E=/&4R6R6='I\s,?Fc@Ii
%<&Lk4p#u>[2,`R6P6t"UhP9hu*iTq,q^ca:e%:;+kktce+Xh04TD!uq="_;-D1$(Oo_s?9p[Jo$\DJ9-r"?"XFGefTlm"\+aPnSb
%j-h'28pEpkdN#+]VC/c]$1$":&Se,eUD=T3d^KRLUK!ZjM&ASP&D`DD&%Y5WFh\&0.NL=JW$,-%3j]0M$":l6Bn%]1TLO<>'%WiX
%,Lf8f7nkHe[;uKk%T@'sUo'dRZ%[+2-Ks>h!_&NGr+iOXF8X%Kps:@>$%?1p59=AT@6H<G!rd=])P5p;nMHNS^H=q*^5oA-r'gco
%_qU@8AJNS#E*+Ma^TFhH"*D1%L:Rk4$5rtXj&KeXnQT*-(_!6pa+.oE$AO'W@5W')nuq`@7*Sgs*$J1q7K+T<=6+lX(h("g'L9]#
%[qHaNdl-WfjS8$Rbh/W$Z;h'%n;C]\F6$bMr8o9`gb^!j+U<Hi9C+"bDR2=u`kV_TNUY89Eu83iJb*A5QFsp4F,54tf[marNBTbN
%&,Bu,ap;'B\uB269[gm?&H2X<G:ktC-.dF6'Att5KE,k>7-qF=4X/>f5Tg5W?ifDgd7cDG!EGp]RNh\'MJld0a$+dS.bRg-C'iFS
%0)W7Ugge=7YD.,YiBIiISH0?`&!DA[]Pcjt(%rp9k\.s(?fY\;cR#I2.7-%`Z;JSMG,#mEZJMVrge#-m/]e@4>S5>?%riAJ(9GA1
%0GbP*H<A8#HjWN*iRrA3\AfdUam^D&M;.5Tr)-MkS0Um1Z(c'^=/6;#^qcgF:/WLd4rq[9SO)@D*&N8%c=GMQInbp[jC]XrcH^#K
%bNqSKV5%uF#1ckrk+tnPOUWq=o$`E6b:.oE5#:uEF%Uh/,'BQL8T&9C,"3s2')][!,),',;)@D[;AAi5J>#E-U`Q@FcWNXCV`W/7
%[trP0)"V48:WQ#$G5,!le9tZqkJ*+!J7YO9Z2+'rJ+`a;QhSeLIJ2)+2PkXcls;[VY8nM_@;T@XJc.h@>VRD"rTq\X=CC>Rj,n.d
%QA9(a%V"s,K:lQk+LCjar@1tR^3_SLY%"O4CNj<R>DjUiD>7WjV<i6'Of7*!JU&Z=AsPP.#6&rj]*i2L>&`5Tg.m89Bf`41'[%87
%G[D"@Np8>I^9B:7Joa)^)X`ks8s+Bl*p'1tJdH:[:4ai/cg5T+b.nBiP-:DhG-GYZ9`+q,O$.Vmp@VI*Z98kY]daXjPV6qc:oYmD
%D(>kkp.RjEU*YIco6p+pmfntGP4dU<Io;nV@!d=d.5tNX5L9(aro9>9T7c$$dn#;EIi1]sC7q>>E)/P(-dZkRe]6<NYaj4"-)#t1
%o"/CsS0ViB]u'P[?!?=&)RR"sDV4!o:^n3.UhFqm]nO9g(jeI`A.<3>IHZ$!5/fUAoOTqYW#\`R;^J3jHX2HT<tT%qUD,diO4fAT
%d<+#`+[K%D`$%,th7onQTr$uCA2jNF"=oj1p7^*BnqnF^"7f`'"Ju]hncd=YRRbIH`fah/m>DaB0FFo%Z@\KabBUCBLh66CM@HS#
%]X&26U11r20.UN6EVE>1M%>Z()b#$:?r'?O=!6b<W1)pn>Ig)Yr$=6[nISfImrn;#_FI#iY3k?P.ogaH-1U01*8V'H*qL><qlmJ@
%GNR?DH0[*#4E"LLHZm.&^+\B>e]@tULU4g4jK#sO^R+9XAbH9l)EV?iV.0s]0]uu!_30RdaoMT!O]r<iWOjUNT#9[6nn%$5lt78R
%12MBR#-nDd$_@#b,?mDGLD?@!..RhUSo;5r/ED*<-oRf0_TQK3fQ+O=dSZR_&0aAt/QBKR68'C&Q/&"^WJ_eG)MbMZO<LiuO6aZr
%>iRKD[pu9/W+:T>p3pn:AgLdIP;*1UjlN`9%UF:KAARcI2d"->a`rB+BsmX]8[6h*_qqpiO#J:@Qna`43\#ch)Nam).X"mV5/hog
%k3@']#MNVA3q;N_]#$jVana_<_Xe$<a*gdE4_i++m)`69QM$1(r4O$$\43u+1#-$=5anK]rUkae_,&3qHAc;pb?E&8oki@+ni867
%c#?hYdR(rTh;W,U5(-MVf1D:sKRHjmDIBsZfp&h@Fa3>E^+XNl;+$dedWa]aMXp35]l0BR9It_IpC5rH-^4.M]4,R5G1cP+Dpju#
%msWs#IB;2C8UO-JQPL-4bXlsMZt%j`Y-8cP[jHNpG?4#%*W!fX%6=IO+.iK%2uhps^HMMmYQ+0KJ,824^PUjDDuRqtIt.7hYC:PG
%DrsjXT<I8G4kn^=qVG(eX[XlN/6*Up]OYPI)QiDj]87.$fQV;_P%s(nC/O*/%ScbVoQ#"q:DCVo:^lpN'h,qna0GJ+BTn[Vk?&Ml
%]EWiOn8.XAa7[lr'F+s&l?bH+Mud'iO+jaQ^Uo&6RTi9t2=<'Y=0K79#[V_<#PAIMh).$=?bl!qc#`^i??^>Ulh%cPOpg7!6H.Q&
%G2rkfJc/hkGC_;]o=DZdmB5DsqkNks1LoqK.-;s"#V+Rqo12@DrX)RS`6'M4aW@!Z7hP;h*DBS0Y>bOH+$EhAP\SOJK0HO*n*d$]
%e0-j/%."^RCZF8D4KYVR"J84GEbks]1D&7:#4AA[\XeXb--49e=B*q8Db?m_MCu=/X20u&,F0snCQ24RG#W*bW<4.dOPeLa&JIjr
%fab:*RR;Bg)q!uZT?CAT;:KG4Z8tT]9mpqOKL]d\%?]HYNopOVZ&4Kd"%eprbJVm3Gq=g3haZVPFjuF8>u93?c+LT^'ZQP2lWc*+
%Q-[iobA,,YFUJVc"#2@GVP+6$_.i^i8f&;f"s[uVn2>;M:*IB&)gUU"ZTiD30FO\[gBFneVR$a*c$6gND:eKQHuJaF3Hd34m;VEr
%T<DJO:?'!@IUMW8pW^U-`!&Gl2fh3EDY9=u8`J:Gkj[%9hWMSi&mdD?]89OGNh9G!,T#0hig?eob$DCf48a2SaeDAbqU>-,>i;qQ
%L\Gf)dRm.0/%0VCK+!uDBlmRL]ARkqY,HG2"LOKD>9hk)K0rnTq.*`#rj7=4RV]ardBb&f\)I+Bm*J<hmd0u&hr8;>rM?)Lq>%&`
%qdLa,\/$thZ;XEoK&>D_fNgF"\Qk0g=J]l9\oInK6`kHAi6rE/=/O#[qtXN:rVWDtK^Z[C9tX.g<^`)X[[<FAZPFj/ptabe5MKX^
%O!8uarKL;bY!&X&ICc/8K<:*VhS^r6fuB@]e!0?CI^,a[^UsC5&$`!@ID/ub"0X54JleARbO=npX+;q1S:q;&j2H%"r9j!n5K%RX
%P%lJM]e,eMf*._h7W1f0?+\_HZ]/&;oV+JE9TtWNjP;*Fp&/G>*IYMl6*admD=lijnCGV2in&,He^rg4s#H!E_aGMiVu/VU^D>'#
%-EXaj:+4MBSFGRjS;8N'3+%h@&BUI/qjLW7TiJ0"apMNIS$T^na.]$rL*g.^S$:I*=uDesek)T6fr,G9BH2=6om<uj_!=AXQ+Al_
%6.YM"WpU>h0g=Ef3gm=<2<C0?o-I(.E8/d@,3.+TL=d9d;f.(Z"P\+3I(HF:eL.U+D,=r8cKVo;p]@naG,)"81fn5B-OQd1i4?%L
%6e?`i+.`l-X_imeHJKniiH:V>'ue5k3OK*d<l7@,D=M%=(df?_(=?N8=dNl2_.qBE$$nNl[Op/:#81!ZH`qY'buP?l[;+:2#ou"q
%M)iOQ7l_p9(XhDYVPs+8Zmn\=/T-qurhr%?G[J''p2b2/fmT.WQ/coR[!dd0^)\@`>]Ds?&fsQP"%g??lCD7Tj%qDH';^q#,.6"`
%4H&B3YEMkc9,"*&oji0r)-Y,S$nYT,cs"BlmsF*Nm$J=I\mIa<dDt9Z^OZ2I*j=sA:b[Qe?MbmdlrfCB*OkX`o2M;5?81XAk$2h?
%\&/n)_q;6M+>G>mFC=u4)>:R;X9GmOlN/a3]]Q8]%GI+cUBeO%:Ud8DOHU<ZA+]?)I2;/AnboTATBlVN.-E9=!U?\qN]&`SQR0c;
%#6)Vgak^XbbM:ll1$!A:._\tra7`;A46BVSRbTX`S6qm:qG\o;[^AY:/l%1+h[\V/G`L5"D)/0*44F0I3P&c1BN<XEj+3sf2Fk8!
%@_200LQnl3Di#R$nonp:O#2=8c%WirXJ$D$dW(E&\K)<(OcE]-1*0oRP":Rbl@h2F@RZN^QO(ZIdEZ-6W`e$67)C/9hB?T+og/fk
%59^JG;R7C)F3A8DIP/;c*tg#AJGZO9;O9F&]k]7bY""J+nT.<WBf?"_dmC!2<b`bN')@.Ti;*0Q#K_7.PoYcc36B`?9&r<TV%RG3
%Kp"CD$&;_o80'<_ZLFYIY:ao8dHbst:KPsr8a/X<Q1k>3LOL-4O`.M86YXR^22-;JCaEC&>n[M0,=2\q=gr,j#>(n?;UIMHIe2Ns
%a8Y%9/^L@idGZItXd4?(#&bk4FNtgC!Uh"sB?OSYFgNn<4qj?L<4TKZ^Lu*(clc++d+&Md!`?j5,8-,Z'JZXb?n5eT8k?'g`B0/r
%'8c<M#],Y-f.%>CL&]aE't+cLaCu^TqTA@61@kAZDmkP**>FE$P<_9Y`5EQCfiL`[r3,C%hQ;?SMB\\P5TeO-?BUl!H&@'O_%h%?
%Ziq<(\WiH]2!M!8fHuY+NA_Us@@5-NReW'*=%sRME=OhB+iL0`U+q(Po8Ma,p>=;-TqmO@ck_kEZq,@s/FcJC@6W?XUB%du*7J69
%Q;o^#!c6mBJN&EMV1uZ9r1%?V[)\C[PGd;0$>q@ST05;N_1GZW.)mHeD>K>]UH^)nZX*N)XM:SKXO^cDaEa74H_N-H<0:]Pp@8\4
%3X*0VWk#+"Cf0VpFA7;!\ULB?T"&Bh!0M<aNT,_8W;5^+OjNI('MHWgFJ.p(Ti<OVU3S%>%EfSj8m3fu/Z6TH[%s*a[;2m$TfU+"
%WTAQ$s+S<`a_iN[(aPT'5Gt$HOVc/57'!7a`F5GX4R_1oVf_S(A,l0Baa;O0+#Zfoa-;4Q6<K5h1XH`D_+I4m-C'Pr<q]q8"qClL
%[(2aD8RA#*M#(aK%)J`i6M$gNKQYBICo]:q=J_J.Via[DW!?N:XqL.^V"K[ljc$22'1m60j!cAe1j(-rSn[;p8n\b_e_jA3i?T--
%+Z<Ir?hM8jGh/[IQ3!FaNR.k]C?Ag>UVU.fn^5o3Ns>-cQHZ$Pg#=7k%dZYV3H#/rCTpB%rK1p@1MHH(pIPpe,TfBdfCTQsXZe!2
%f6m6K0S4LmP4@Pb+@6g("`+:#Wdaa$(:/b@J'&s&L9&b."972M=p5@ZQO??unp(3ZM?K\9<9iQ@`\'22g-#n:;7UO2\*#TRK)TJ)
%m-mcGm.?tP:Iq.iS9R_d5h9$-]u?ckR<95,d@>l"(q2>pAMS;j8E`XRoG'>27pCpElt"T#(:Wb)5,[DJFHi.\\n\3Sgr>;F#`Qf>
%.3u0d8O./`[)0E]6^e25c=+cSDr[2tQTBg:cb@)#M2b;N4el##7&oXsNq?#BeeMF2ZlF\54KRV7<HmIuY\_Yh%4MIO<S&pGq(_EB
%d0R,?E0jB[/`D<D-B3;LGs8?BK+qo<QJ.[O=KT)2:l6Yil9Pm.Xq=aYL1CglKs]*JU7[/S<,GS?#q"&7,ItKO/t!!O\ZkFIe(A'-
%B3mEmNuj)En6F]nT,'"lK5S)m_j[[C[E]!e`U\(!(p?.O>*gM44T0C>eE%t!o.Z(#3nZ(dmMb6m/.3*fMW_n*.Gc/J7ai@J4943;
%'XD\59rSOnKI%)Ne2jRL(:aZ;B!.X_0>;"'PsR+>rLuAW4SJ]/\rfCP2*F<$P7\)@B%91-KPbg\^ZWTWP4]s`Y:1&a]0Y*[d9K9N
%/j3unL19U1dP_8f-"hfVL^*280]l+SHf[p;O&Vdtr)blXcU>V!eSI>H0.tCOP_YlO2iVf.`_o*$/1<HCEGXj>:tpJ8Tspl[o>@St
%*&Os)pmWle/!r)*$$$dZf,I?HB7UQI\ZV&16L;(PW"ae5Wjh$Dku0",G-u+#`N'2Tb48G<TV:Dga\GRhlp'docIHGmWAl-fkX`th
%Xt.FTaiFI#S'l8@]tC+NJCNkjWinAHNQB_?hJB36^e.A'pRkViFW3Q;_FZQ-bI52iCZ/mPK8MNO>n:dAq_t.Y3:GLn72Wh[d,LP1
%;%lRNpOQ-RW@;1pZ+C`B#f9fq>u6ielPdO]EWr;1<?g!o5""Bk1lO_F;!:t.jafV63,h05\C\W9bZn8MfQd2ZW-[eVm'8`%enr_P
%QD#>ARL&lSa)[-7CW\BNG^D'HBDMkJ7^X_DU9`35Cr^mXQ'+-YR%E(@U^7&;p8l$#S5qF*&-:&T'iW+E<LI<`8l[Fc>S[-];/+1k
%7uhkZ,ga+Z*IaIS`>]S6\%@m9L6BQ&-u7,"%M!K@;qeVn#.9/_5csT]cm/i?<#er,Uu3>tD^YI9,XLF/QJjc=MK?j\<8"KWZ;J2(
%#;>$meTEn]4c)AOI8_Jb"X_4kpUt9rZC8S:P[s8,=*A'EAF%PT_6ce&oGc+-]]'!9#^a30YK6l;='oI16*9lPMMS>=]VLg4>@;g#
%Jba<9/08ur1(/q\X,ll-j<OMT%F-0(()`Z?A-dtDe"d6Qj<o<E8_01iF+3$0nhn%Ipm:=/NgPeO*n5Gn&1!7aQ.i]9<DF-YPtSfM
%H<kT5Wt9/5=qrJ)kc!gS=ljs\[:"P*9EO)qPH_a6SFrA@nq5gp.Xj4^;3>:E9%I#kV)6FNi,FpDDC1jId;;p._(%#[n!%_cqK_C,
%cC*u5JlK?u'UDWc'geJ@5bt,N?!,T4b58B/(0%@pBF0DrIOOUkq;f.JJ83`"$=G],9V"L=j,hQaj:_t1<Jp$3M=#-3HoJ1q%[*$Y
%#X=)+7(!r7:^\7#Ri0=%),u\c+jdWE-#g/qc3$7chC4p1a''dgNC!7PQ"!liX&'(jX[E]]n:^`epPNMkg@sTMgKm)oTAc<q;_:Q5
%EZEWS4kTsFd3tKiU5POD:jPF.ZKVr^P'ffp/a;;;In+d0:P865n#8TUlhXIOh*6DdLO]0_p`$;VVkNMlHnV8EhDP<KJcNIC"pr-<
%N?bntZe@A^\YjR$U8XQbM)!pj24H&[.!!n'&Nm![Np)'&Zl/T`8=T5s;7Q..5:6l^H+U.=;fV$_=am8ZGVU_nZmF_>-ai((q<Lt!
%N9;pTiQqf4;WEf<Si'-23=^\6B5Y!>E@YUpjtm[nm!0A,d):@C>NUl#%sLk)o=a74pVEY1jHtmZ5ef<0QgO;jgL3\&XMkiA+LIkD
%YR+LR_bnfn7=@aB:c!PGQ[gF\i8.!jP=MJA;f#HR<\caND-;\n@5;jgfq!i\=Lk8\UfpZ?-[D@F:a4H,ZbJ!4ga/rOS$YkO]m*rK
%+G;FLo2A+cDb5[So46]IV.p$1`^C[S9`W3B:jg&:A[<s59ab%<qYE&7Yk&-ETeH"*$aoG2'gan8T1.1!E,Oib]*;^s@<,L\KZ+Cs
%,b,(g6`&:+hC/"7E$$t[1eL2n&(?4,g*N05=S"CfLUian,]bQ_dnQ:ndHO]3AsdrpWE2eu,*,XmT-k=44M4P_d>@#f+t-Ke@+QRE
%Xg+la@b+(>%&OH.A\Y67b!7`mH0;-CUko6cFJm6J=;&=pD&)N!%Qao-^3:.7VDXm4SO?A;1eUh:=j*\S7*6GS:m>GJJg<4Q:uZ-1
%Qc$Neh&'OY#brsdhkWj'Gi7@=4A!\!3U&4=Q?'4^Wh/UpRuWB;Hs$F3s34Y3%3Ha0F8;nQ8aC,5%2,W$LOga1)@*lUdu.8.,91N!
%.XG%HZD=Rl#fjcH;2Gr4@W_*KLm(?&DGV,)F#=n+O_eu_iXROAc@I"8/6X!fl%Fl?_^\4LS6aZ6'4)62[kO.uHb:jA5r6Jh,3NE9
%G7cZX>2+o^Tae-,/*,T0SOiKW+8&2b>Yq@JQPWF!C;NJf&u)?J!Yo.M&;B&q"OLeTYKSC]LY_u@[Z0LmFEBks;^)//PLK9sQk7##
%s6oAOluToUT,n*X5$-&S0j+Km<rP]jHTM[kc:T9J>s'Qi)FYmNA>)h#[m[_&2'^6@WcfUqPQ$U+msLG%86)l6]4$kD;_SlXZ=H@(
%:*2IVBWuFad\I1HN!45OSiB;qbUeVu9k4T.d#uR7+,)8l[XH!KXpKjp0pCXHS,DpsAAQ.$R6pW9ntG:]`U\;Q\Ag=++XLS>4eG*k
%TO:od1<I^R_3Zm5S_)3;'LiU]]S^?tjS\.T@tbA,_tC_Q)ktE]3VaGH3C5?D23D);0bl:FK2uRS$E9hZC;FB(IX;,ILLA)-`C$2g
%ls5OH2pSKidYh/3Z#6:3)q''?_;DYTkU0;ob03Vd/Q)d0R<jdQ,XPc?/&i,?2GP#Hp]H\R.g^/9;,[uC]-Q:i>[Al3CJPM<8&7fS
%rc?2$B,&p>?5teC;MFXW7O-$]Pf:3t4C'n17oa//Z*/:*j0-7D/SU28V!o=l;>Cb,Vj[E8'KRcP4\(q-SfNGf6LfiZDXQQ.X8>3?
%_&je,%9'Ap[tRtS^Cb3,Hb&3Kb/.fAF09%.A,P?/A1+Puo7_+7\O9%VT9,;-U0s9E%2@G^XMmS;G,g(T?!'5aR-NNp\Z7hPKblMF
%\M5m^SoI?iWAfutRBjp<2PsT7V4FVr1QJ2MU`7rQF+;%6.WRW1atO#dDU!.^@lfiobck]#24.0VC@KZ`37$aBARo5u$ITb]lcoi%
%IcqN7#6sSNGj?=>Qd7(!'GO`/AalTc.QZ\*_f3=eCHouCOf(T'6?J^\'L#ccQi3#]_*Zu?159HNs(&njT;:]I]-!o'*UQ^"9f0<U
%+E;5EV!D/=:A\`t7uJS]e=eF.^u20^_Q]'ABjQ.,O.**1$,tsVg`r\R>l<%pANRk$30(+0T92UFK1Z.XYYa&YcCI]cF`VmS,iHc3
%H&taGMrmY.Si:9"l9;D8ZrETUQM+nL@3#.!TM3qD!"uG*/ab""*\!MSQL`NoRDSc-\Sre-gYu[!K&>Qm6?S/c>$:DoP1qkohNnYI
%"[\,Hf$+,aATY%*mGVth=)D_MR84&%>#d,@6D8ABXf-Xk=C(U[nEk9aSPorckRfeOTm*K'RfhLV,5t[&OIX)3o**]2;)?o_)@[W#
%)V9VL+,2X%,s/AHZ<Cm,oNdlO]=>5g)kjOpW-7!n67UT\/7_fSE/d6s;3Qm`__71O%II;TdCc;q#JiBQd!@+Z3%rmAC\S+bSZCNi
%63?#AL&?>WJX`7ea%r'lA(o>AR583%.[4M@agI\j]Olm_pkD6&\es=Xe<R;!#@+a"]!Su:DWW`]'6PB0@NjNk./:DQarkL*e28k`
%HQ;<DNul*i4)VR)+MKXa&&kjRc#cs,e9k_2Ek)Zi\X/sGG)GRN%"j8.VW'Y,(@[4qUPmrC;:[=O;E7<``i(B5AlaPW(f82YdV6bj
%i/q#Tbc<gP9X^T=FsEtG<[MJJU+#A*k#i)/gS"nh"iG!W,!I?*8)94GFdjT1T1KGn?%T$r.*X/`QtB#?q;&u0<iKTc>j7>pOR*b6
%DA*9i>H$j'RbJ*c>iBpQ$*+\sDI1Lk_RM5W@>qa%_Q&s,fJLqQGe%sX>M\>p1p]1e('CZ*m'/Yri#MXAS35uierYrqS"!-@TqIi(
%R8+,O9GW#;PNPl8<Mc@n8/:=d9A.C-/Zp-F9_/aBL.2Gsep:MiNL\NC)N.,4bpCjE#PqQ/.qM%(l?m7D+&4`b!u="2flG;piC;Ap
%rWYguUtfN1(<+qR!3#n,R3.Q$DYlOc\U7#4AM#7C>21:e>GTCTQ:'@Ip')g2;+-t]Do[f&nR8Rr\(Q"aGNSl%2.U9PX;k,OU6[aV
%XIp.Ng\aQO<^-$/:!#2J+mSfs>CH\u/-#9`$4_B@3JU<Q>qB^o;/R97"\+DJN.3-M2OV!b@<.<n@`DhIPd!V]PG6tLQ\<o"6dDMM
%2.""MB,dk^>qKsHhY@ZY34C6dHsY+rnk-!u+s:NX\/$0DOjX_019\`0Lqn.DK.a3FU)5^TLNg0S6KunlEB3ZmlDJB:])Ejq5IGmh
%g#.nXCN@:-OCsJe.PE1JpouYTTD_'K.[Gr+cqc4/n#rr4%ABI`1mt?sM2-9iO&=NW3Tf2A(=KiZ`O3+6G\M39]Q\A;gL(AmM/V\4
%U]d#.4`%en-Em2)d.QWe:N,gLgn2ooMkB=Tmt7DGQ77i5S2^8liJTH($0]I>$HfbE)iX\F%_,`,jN8:YGi'X]A:k0Jknb1,aC8':
%C3%3E)mmFFd&kDITf[>Q0E"'oUnD,$'`t-k5<6CB+#EmB=6QqF)bdbq\?MMUc:&)7ZIm30R&itKq&1oYihN]F,gRf]CgWSDp2Ot%
%Y3F`0q+%XfB=dUbH25>#NPBNLhqe>/F604G0$P%_C)"hfeRdQFph3oLa&."^U*$bh+;jJ%(#(WYLF9j!7s_[%M)Yi\^\;Wuj3:[8
%IT"hs$b_,iDKnZi\4/[[X[SlDSTT7:L%<]7h(@dLp5JLTS"e$`Vu'hN[POX`*k,cM\kM5ZN1^L#QaIJF?S<qB5s*aZ;;\df2;d0%
%g[/tHKA6qA3[-?sXVOHUiP$&`c]2ieg0l*#hP<s;c4YOij2gsKBbSQB4D(AMV"Hr21um-<Kj<b\X>?SZV$Q4#m$N$6*uHf^j\q\3
%F3'[pGK`+7T:^'KP@DmJ:Ym?,dR4-&]fTg/g]r.S]&p>&Ho^_`XM^s*XEBKLfMEc6AU3G]/EMtF0Ls#tAomn0.^ib@6o-(UE5jj/
%@;F2q#43FLq1[ga9;ksbilp)%g)Jh@Xm6F&UYK&Fah4/9c84f3UQSn9rd5`#oGo9;,H%A@a@]btC`D(4=$inH_qsB`*sapBN(bC_
%(->gNrZT+8+f2l_%D&X_#5]7H#1'imSG#GjL3nM=aE#A!6pi+7e@+K47Hc%V^AdTc_qX[ZJ6Z)hh,,/UkE!UW@qH7N_;!%:*@GDq
%4ecH4r&Xc(m[9igCg5D`2n26+oDJ!9MYe(#SBXV>>IeonfX#0Q?=R64Sl8c$^6l7`E6.aHl$jPjd&aQ%!im3]!rQAM5a]!1[Lfim
%UH7=$K-i/]EDaUI<.#M:gLO9gpR8?sIMhpoT'Gp0XG;U)+2:Obm"Z)uj#Mi]O-T,GTBaO%8kDnO-H<cr%c%Dd<bQ`6RQWiB`j<fh
%3+%`%4-TW)h@//T8>W`'g(&(i$-iG(#MSD9K(c9`iE\PKlN>@QetbgS;jYV60m3(DT28B8.Og@Y^+%@WKQC^LD67k3aV3gfj-C=5
%]</Q9j:1L,76l&:s-e<pR:?+HIL5W"M$[&nEcdma>>3]jm2&R;.Ga!!=tS$fX:.I.EBE"&\suYFcZfX\2%d.OhnYH=UeI&<LU/t-
%4?3l#,#SFmWm8PfB<=p5MhRV&:FdJ[n^?KY=ms[;`Ra"Y2H_MeDG?QIfqio1T!c#_)Q8.s:WT$<1O!,0/_4QkWNA/Sq\qLn=#4QI
%3`TFI_AXXH"n"hj(JKR;hTJf%X\U<Y#q91bgbA'LI_O`2Lhh:G1eG[#;Qd\Pp8mBKI%9NGD*"`:QS[5N_2\&Z0((@scL6OC/R6[(
%6P:]RSl^7Y&bTHBYL"irdhcPTY?A^F[h%YIf:T4s2FMjKVcNt?%d<13CMa5[*q9k&4*AVlI;O)hLZ]XXF"\m;<Vq8X<pd$RU3p5C
%T+F6H8!X)rq!9>5Q,GE-qIA(S'D<VmmmdbqTF%s8JXH?^6f/HuYXT+%$5E&K"a>R,+jZ=(3fhqfc\MZqAT-j%X@I`L^l!&:IQ1Q3
%i_iU^%NXMPCL$2320Np&`=.aNJ^A1Cf=['-6IP>+-n_N`SeNV0Xi1\R!>kD0)nN_1%a@K5H;_MOo0]g(BSOCSg]gorcba!?'Ee'!
%ake!\^ls?'q_a2eD?KMA[qU).0B`4K8rQPBUl`ban>$Lu$u.Z+`^5S!VUrmcWLY`)oqNFE1t^+dZYAK,o)>%V5M;N0Lj(:4>[YNj
%-p;B@iFir;4O,Q"HN*/)[\9f6[qU,/05(-H`1A5t**F*>j!5D3rQ$',Yoic-`k3c2UW8GH]_]=<;T\I2M5LDt^XWY^MKU`dA>1Q]
%J4qqaYqs`]_?G6$\YEgd`VC\9&K8^#R_(i5Y6k8eN^6"50)WJm2@uEumTmLY7&<*gh>*I7iG@f@<:tDT7p3Q],a?^^l@O12c[]qE
%YKC/F@0p\f?W-jD*(*&iph3W.^[op\7*XEGL2#hsf4$WO'sFQ/Mj-c):Z&!i_rU"837k'p=^%"BB!+e4<R#4[k$kF?2N"6?,P_QN
%Iu8:$>tPNJTV.$,8"QP*;(NLCDCEU9Z=R=Hei(U]I?r;o$RNUhQ.+%@RM9;hH8U4Jcb]EYgUt1uQW*iTF>pB=H*?L;pf\:VQhs?Q
%GG=tcc`TYp+=Dpd/R/*$4H6/=N7f3d44O>f?X]tXLI78[jdJ<CV:F3EK3D<"B8;R]$-H"D@UOUUjL[m0S1U>"GQ+[81D`0Q;j0Uh
%B9TToCe9!:%R"S.Afp12jYk<4ilda>]l.-7j&'nqhBGJ`r//,><K;J"ZPt4rpQ/H3.K9\A)homM=rg%0=_XSY'-qIKZk)q+'g.BZ
%rZ*GMjVoEid`[5e,dV$?CmP[S&KC#lg]gojo%OgPBYrq:\i$Bp`SU!F55*sgBBKuAW>@AhH:'SF+9l,9O5CMcZg,TMJ.I$NUM2`G
%mc]`(MF;Gs5DG`d@_pG.Zl]o944F6]B0XG>$0ars4+uN18QaHF*tesFntil;P()N%-VEXJU7o0TS/q"1ht+5D"8!,5Bm=\PkPGii
%5`l$&C'o2Y?C'LIj`eIdpYDJ!?9mK"7W1M=qXju?opbNs]R3N4rr;HdoS['Mi+N)UgY[MT^]3rn^W_?#e"?R;cen`fG7WU1i=CnI
%]Djtmo^M`BIJ;q)pW#LHp[I?qro7?OpsJrSc[PS3s7>]/qNHC2=(JTc~>
%AI9_PrivateDataEnd
